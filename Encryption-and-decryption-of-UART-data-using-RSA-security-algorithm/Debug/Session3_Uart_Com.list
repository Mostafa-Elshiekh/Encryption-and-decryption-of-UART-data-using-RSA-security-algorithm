
Session3_Uart_Com.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004a38  08004a38  00014a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08004c78  08004c78  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c78  08004c78  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08004c80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  200001f0  08004e70  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  08004e70  00021464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914d  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000178a  00000000  00000000  00029366  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f0  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023fc  00000000  00000000  0002b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fb4  00000000  00000000  0002d984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00015574  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00047eac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  00047f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f0 	.word	0x200001f0
 800014c:	00000000 	.word	0x00000000
 8000150:	08004a20 	.word	0x08004a20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f4 	.word	0x200001f4
 800016c:	08004a20 	.word	0x08004a20

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f103 0208 	add.w	r2, r3, #8
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f103 0208 	add.w	r2, r3, #8
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f103 0208 	add.w	r2, r3, #8
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d103      	bne.n	8000b1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e00c      	b.n	8000b38 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3308      	adds	r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e002      	b.n	8000b2c <vListInsert+0x2e>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d2f6      	bcs.n	8000b26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	6892      	ldr	r2, [r2, #8]
 8000b84:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	6852      	ldr	r2, [r2, #4]
 8000b8e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d103      	bne.n	8000ba2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d063      	beq.n	8000ca0 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d05f      	beq.n	8000ca0 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be8:	2000      	movs	r0, #0
 8000bea:	fba2 1203 	umull	r1, r2, r2, r3
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	f04f 0400 	mov.w	r4, #0
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <xQueueGenericReset+0x40>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14c      	bne.n	8000ca0 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8000c06:	f001 f9d1 	bl	8001fac <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c12:	68b9      	ldr	r1, [r7, #8]
 8000c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	441a      	add	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2200      	movs	r2, #0
 8000c24:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c36:	3b01      	subs	r3, #1
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	441a      	add	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d114      	bne.n	8000c86 <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d01a      	beq.n	8000c9a <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3310      	adds	r3, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 feb1 	bl	80019d0 <xTaskRemoveFromEventList>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d012      	beq.n	8000c9a <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <xQueueGenericReset+0xf0>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
 8000c84:	e009      	b.n	8000c9a <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3310      	adds	r3, #16
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff0c 	bl	8000aa8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff07 	bl	8000aa8 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8000c9a:	f001 f99f 	bl	8001fdc <vPortExitCritical>
 8000c9e:	e001      	b.n	8000ca4 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000ed04 	.word	0xe000ed04

08000cb4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d033      	beq.n	8000d34 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000ccc:	2000      	movs	r0, #0
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	f04f 0400 	mov.w	r4, #0
 8000cde:	0013      	movs	r3, r2
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d000      	beq.n	8000ce8 <xQueueGenericCreate+0x34>
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d122      	bne.n	8000d34 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000cf6:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8000cfa:	d81b      	bhi.n	8000d34 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3348      	adds	r3, #72	; 0x48
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f9de 	bl	80020cc <pvPortMalloc>
 8000d10:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00d      	beq.n	8000d34 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3348      	adds	r3, #72	; 0x48
 8000d20:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f805 	bl	8000d3e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000d34:	69fb      	ldr	r3, [r7, #28]
    }
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}

08000d3e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e002      	b.n	8000d60 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	69b8      	ldr	r0, [r7, #24]
 8000d70:	f7ff ff26 	bl	8000bc0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d92:	f001 f90b 	bl	8001fac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d302      	bcc.n	8000da8 <xQueueGenericSend+0x2c>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d129      	bne.n	8000dfc <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6a38      	ldr	r0, [r7, #32]
 8000dae:	f000 f92d 	bl	800100c <prvCopyDataToQueue>
 8000db2:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d010      	beq.n	8000dde <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	3324      	adds	r3, #36	; 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fe05 	bl	80019d0 <xTaskRemoveFromEventList>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <xQueueGenericSend+0x150>)
 8000dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	f3bf 8f4f 	dsb	sy
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	e00a      	b.n	8000df4 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d007      	beq.n	8000df4 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <xQueueGenericSend+0x150>)
 8000de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000df4:	f001 f8f2 	bl	8001fdc <vPortExitCritical>
                return pdPASS;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e063      	b.n	8000ec4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e02:	f001 f8eb 	bl	8001fdc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e05c      	b.n	8000ec4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fea3 	bl	8001b60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e1e:	f001 f8dd 	bl	8001fdc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e22:	f000 fb79 	bl	8001518 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e26:	f001 f8c1 	bl	8001fac <vPortEnterCritical>
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e36:	d103      	bne.n	8000e40 <xQueueGenericSend+0xc4>
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d103      	bne.n	8000e56 <xQueueGenericSend+0xda>
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e56:	f001 f8c1 	bl	8001fdc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e5a:	1d3a      	adds	r2, r7, #4
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fe92 	bl	8001b8c <xTaskCheckForTimeOut>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d124      	bne.n	8000eb8 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e6e:	6a38      	ldr	r0, [r7, #32]
 8000e70:	f000 f990 	bl	8001194 <prvIsQueueFull>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d018      	beq.n	8000eac <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	3310      	adds	r3, #16
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fd8e 	bl	80019a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000e88:	6a38      	ldr	r0, [r7, #32]
 8000e8a:	f000 f91b 	bl	80010c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000e8e:	f000 fb51 	bl	8001534 <xTaskResumeAll>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f47f af7c 	bne.w	8000d92 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <xQueueGenericSend+0x150>)
 8000e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	e772      	b.n	8000d92 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000eac:	6a38      	ldr	r0, [r7, #32]
 8000eae:	f000 f909 	bl	80010c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000eb2:	f000 fb3f 	bl	8001534 <xTaskResumeAll>
 8000eb6:	e76c      	b.n	8000d92 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f000 f903 	bl	80010c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ebe:	f000 fb39 	bl	8001534 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ec2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	e000ed04 	.word	0xe000ed04

08000ed0 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ee2:	f001 f863 	bl	8001fac <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eea:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d01b      	beq.n	8000f2a <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00f      	beq.n	8000f22 <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3310      	adds	r3, #16
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fd62 	bl	80019d0 <xTaskRemoveFromEventList>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <xQueueSemaphoreTake+0x138>)
 8000f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f22:	f001 f85b 	bl	8001fdc <vPortExitCritical>
                return pdPASS;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e069      	b.n	8000ffe <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000f30:	f001 f854 	bl	8001fdc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e062      	b.n	8000ffe <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fe0c 	bl	8001b60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000f4c:	f001 f846 	bl	8001fdc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000f50:	f000 fae2 	bl	8001518 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000f54:	f001 f82a 	bl	8001fac <vPortEnterCritical>
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d103      	bne.n	8000f6e <xQueueSemaphoreTake+0x9e>
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7a:	d103      	bne.n	8000f84 <xQueueSemaphoreTake+0xb4>
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f84:	f001 f82a 	bl	8001fdc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f88:	463a      	mov	r2, r7
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fdfb 	bl	8001b8c <xTaskCheckForTimeOut>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d123      	bne.n	8000fe4 <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f9c:	69b8      	ldr	r0, [r7, #24]
 8000f9e:	f000 f8e3 	bl	8001168 <prvIsQueueEmpty>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d017      	beq.n	8000fd8 <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	3324      	adds	r3, #36	; 0x24
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fcf7 	bl	80019a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000fb6:	69b8      	ldr	r0, [r7, #24]
 8000fb8:	f000 f884 	bl	80010c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000fbc:	f000 faba 	bl	8001534 <xTaskResumeAll>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d18d      	bne.n	8000ee2 <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <xQueueSemaphoreTake+0x138>)
 8000fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f3bf 8f4f 	dsb	sy
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	e784      	b.n	8000ee2 <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000fd8:	69b8      	ldr	r0, [r7, #24]
 8000fda:	f000 f873 	bl	80010c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000fde:	f000 faa9 	bl	8001534 <xTaskResumeAll>
 8000fe2:	e77e      	b.n	8000ee2 <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000fe4:	69b8      	ldr	r0, [r7, #24]
 8000fe6:	f000 f86d 	bl	80010c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000fea:	f000 faa3 	bl	8001534 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fee:	69b8      	ldr	r0, [r7, #24]
 8000ff0:	f000 f8ba 	bl	8001168 <prvIsQueueEmpty>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f43f af73 	beq.w	8000ee2 <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000ffc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000ed04 	.word	0xe000ed04

0800100c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001020:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	2b00      	cmp	r3, #0
 8001028:	d043      	beq.n	80010b2 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d119      	bne.n	8001064 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6858      	ldr	r0, [r3, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	461a      	mov	r2, r3
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	f002 fa5c 	bl	80034f8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	441a      	add	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	429a      	cmp	r2, r3
 8001058:	d32b      	bcc.n	80010b2 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	e026      	b.n	80010b2 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68d8      	ldr	r0, [r3, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	461a      	mov	r2, r3
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	f002 fa42 	bl	80034f8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	425b      	negs	r3, r3
 800107e:	441a      	add	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	425b      	negs	r3, r3
 800109a:	441a      	add	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d105      	bne.n	80010b2 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80010ba:	693b      	ldr	r3, [r7, #16]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80010cc:	f000 ff6e 	bl	8001fac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010d8:	e011      	b.n	80010fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3324      	adds	r3, #36	; 0x24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fc72 	bl	80019d0 <xTaskRemoveFromEventList>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80010f2:	f000 fd95 	bl	8001c20 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	dce9      	bgt.n	80010da <prvUnlockQueue+0x16>
 8001106:	e000      	b.n	800110a <prvUnlockQueue+0x46>
                        break;
 8001108:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001112:	f000 ff63 	bl	8001fdc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001116:	f000 ff49 	bl	8001fac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001120:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001122:	e011      	b.n	8001148 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d012      	beq.n	8001152 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3310      	adds	r3, #16
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fc4d 	bl	80019d0 <xTaskRemoveFromEventList>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800113c:	f000 fd70 	bl	8001c20 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	3b01      	subs	r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dce9      	bgt.n	8001124 <prvUnlockQueue+0x60>
 8001150:	e000      	b.n	8001154 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001152:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800115c:	f000 ff3e 	bl	8001fdc <vPortExitCritical>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001170:	f000 ff1c 	bl	8001fac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800117c:	2301      	movs	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e001      	b.n	8001186 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001186:	f000 ff29 	bl	8001fdc <vPortExitCritical>

    return xReturn;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800119c:	f000 ff06 	bl	8001fac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d102      	bne.n	80011b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e001      	b.n	80011b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80011b6:	f000 ff11 	bl	8001fdc <vPortExitCritical>

    return xReturn;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 ff77 	bl	80020cc <pvPortMalloc>
 80011de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011e6:	204c      	movs	r0, #76	; 0x4c
 80011e8:	f000 ff70 	bl	80020cc <pvPortMalloc>
 80011ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
 80011fa:	e005      	b.n	8001208 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f001 f813 	bl	8002228 <vPortFree>
 8001202:	e001      	b.n	8001208 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d013      	beq.n	8001236 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	2300      	movs	r3, #0
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 f80e 	bl	8001246 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f000 f884 	bl	8001338 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e002      	b.n	800123c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800123c:	69bb      	ldr	r3, [r7, #24]
    }
 800123e:	4618      	mov	r0, r3
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800125e:	3b01      	subs	r3, #1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f023 0307 	bic.w	r3, r3, #7
 800126c:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01f      	beq.n	80012b4 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e012      	b.n	80012a0 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4413      	add	r3, r2
 8001280:	7819      	ldrb	r1, [r3, #0]
 8001282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4413      	add	r3, r2
 8001288:	3334      	adds	r3, #52	; 0x34
 800128a:	460a      	mov	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d9e9      	bls.n	800127a <prvInitialiseNewTask+0x34>
 80012a6:	e000      	b.n	80012aa <prvInitialiseNewTask+0x64>
            {
                break;
 80012a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012b2:	e003      	b.n	80012bc <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d901      	bls.n	80012c6 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	6a3a      	ldr	r2, [r7, #32]
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	3304      	adds	r3, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fc08 	bl	8000ae6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	3318      	adds	r3, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fc03 	bl	8000ae6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	f1c3 0205 	rsb	r2, r3, #5
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	3344      	adds	r3, #68	; 0x44
 80012fa:	2204      	movs	r2, #4
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 f905 	bl	800350e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	3348      	adds	r3, #72	; 0x48
 8001308:	2201      	movs	r2, #1
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f8fe 	bl	800350e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 fdbc 	bl	8001e94 <pxPortInitialiseStack>
 800131c:	4602      	mov	r2, r0
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001340:	f000 fe34 	bl	8001fac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <prvAddNewTaskToReadyList+0x108>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <prvAddNewTaskToReadyList+0x108>)
 800134c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <prvAddNewTaskToReadyList+0x10c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001356:	4a3b      	ldr	r2, [pc, #236]	; (8001444 <prvAddNewTaskToReadyList+0x10c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <prvAddNewTaskToReadyList+0x108>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d110      	bne.n	8001386 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001364:	f000 fc80 	bl	8001c68 <prvInitialiseTaskLists>
 8001368:	e00d      	b.n	8001386 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800136a:	4b37      	ldr	r3, [pc, #220]	; (8001448 <prvAddNewTaskToReadyList+0x110>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <prvAddNewTaskToReadyList+0x10c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	429a      	cmp	r2, r3
 800137e:	d802      	bhi.n	8001386 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001380:	4a30      	ldr	r2, [pc, #192]	; (8001444 <prvAddNewTaskToReadyList+0x10c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <prvAddNewTaskToReadyList+0x114>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <prvAddNewTaskToReadyList+0x114>)
 800138e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2201      	movs	r2, #1
 8001396:	409a      	lsls	r2, r3
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <prvAddNewTaskToReadyList+0x118>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4313      	orrs	r3, r2
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <prvAddNewTaskToReadyList+0x118>)
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a6:	492b      	ldr	r1, [pc, #172]	; (8001454 <prvAddNewTaskToReadyList+0x11c>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	3204      	adds	r2, #4
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1d1a      	adds	r2, r3, #4
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <prvAddNewTaskToReadyList+0x11c>)
 80013e6:	441a      	add	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	4918      	ldr	r1, [pc, #96]	; (8001454 <prvAddNewTaskToReadyList+0x11c>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <prvAddNewTaskToReadyList+0x11c>)
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4403      	add	r3, r0
 800140c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800140e:	f000 fde5 	bl	8001fdc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <prvAddNewTaskToReadyList+0x110>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <prvAddNewTaskToReadyList+0x10c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <prvAddNewTaskToReadyList+0x120>)
 800142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002e4 	.word	0x200002e4
 8001444:	2000020c 	.word	0x2000020c
 8001448:	200002f0 	.word	0x200002f0
 800144c:	20000300 	.word	0x20000300
 8001450:	200002ec 	.word	0x200002ec
 8001454:	20000210 	.word	0x20000210
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800146e:	f000 f853 	bl	8001518 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fc8d 	bl	8001d94 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800147a:	f000 f85b 	bl	8001534 <xTaskResumeAll>
 800147e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <vTaskDelay+0x44>)
 8001488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000ed04 	.word	0xe000ed04

080014a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <vTaskStartScheduler+0x58>)
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	2300      	movs	r3, #0
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2300      	movs	r3, #0
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	4912      	ldr	r1, [pc, #72]	; (8001500 <vTaskStartScheduler+0x5c>)
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <vTaskStartScheduler+0x60>)
 80014ba:	f7ff fe83 	bl	80011c4 <xTaskCreate>
 80014be:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d114      	bne.n	80014f0 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80014c6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <vTaskStartScheduler+0x64>)
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <vTaskStartScheduler+0x68>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <vTaskStartScheduler+0x6c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014ec:	f000 fd3e 	bl	8001f6c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <vTaskStartScheduler+0x70>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000308 	.word	0x20000308
 8001500:	08004a38 	.word	0x08004a38
 8001504:	08001c39 	.word	0x08001c39
 8001508:	20000304 	.word	0x20000304
 800150c:	200002f0 	.word	0x200002f0
 8001510:	200002e8 	.word	0x200002e8
 8001514:	20000000 	.word	0x20000000

08001518 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <vTaskSuspendAll+0x18>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a03      	ldr	r2, [pc, #12]	; (8001530 <vTaskSuspendAll+0x18>)
 8001524:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000030c 	.word	0x2000030c

08001534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001542:	f000 fd33 	bl	8001fac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001546:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <xTaskResumeAll+0x1b4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	4a66      	ldr	r2, [pc, #408]	; (80016e8 <xTaskResumeAll+0x1b4>)
 800154e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <xTaskResumeAll+0x1b4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 80c0 	bne.w	80016da <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <xTaskResumeAll+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80bb 	beq.w	80016da <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001564:	e08a      	b.n	800167c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001566:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <xTaskResumeAll+0x1bc>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6a12      	ldr	r2, [r2, #32]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	69d2      	ldr	r2, [r2, #28]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3318      	adds	r3, #24
 8001590:	429a      	cmp	r2, r3
 8001592:	d103      	bne.n	800159c <xTaskResumeAll+0x68>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	68d2      	ldr	r2, [r2, #12]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	6892      	ldr	r2, [r2, #8]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3304      	adds	r3, #4
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <xTaskResumeAll+0xa6>
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	2201      	movs	r2, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <xTaskResumeAll+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <xTaskResumeAll+0x1c0>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	493d      	ldr	r1, [pc, #244]	; (80016f8 <xTaskResumeAll+0x1c4>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	3304      	adds	r3, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	3204      	adds	r2, #4
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1d1a      	adds	r2, r3, #4
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <xTaskResumeAll+0x1c4>)
 8001640:	441a      	add	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164a:	492b      	ldr	r1, [pc, #172]	; (80016f8 <xTaskResumeAll+0x1c4>)
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	1c59      	adds	r1, r3, #1
 800165a:	4827      	ldr	r0, [pc, #156]	; (80016f8 <xTaskResumeAll+0x1c4>)
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4403      	add	r3, r0
 8001666:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <xTaskResumeAll+0x1c8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	429a      	cmp	r2, r3
 8001674:	d302      	bcc.n	800167c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <xTaskResumeAll+0x1cc>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <xTaskResumeAll+0x1bc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f47f af70 	bne.w	8001566 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800168c:	f000 fb68 	bl	8001d60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <xTaskResumeAll+0x1d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d010      	beq.n	80016be <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800169c:	f000 f836 	bl	800170c <xTaskIncrementTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <xTaskResumeAll+0x1cc>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f1      	bne.n	800169c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <xTaskResumeAll+0x1d0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <xTaskResumeAll+0x1cc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <xTaskResumeAll+0x1d4>)
 80016cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80016da:	f000 fc7f 	bl	8001fdc <vPortExitCritical>

    return xAlreadyYielded;
 80016de:	693b      	ldr	r3, [r7, #16]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000030c 	.word	0x2000030c
 80016ec:	200002e4 	.word	0x200002e4
 80016f0:	200002a4 	.word	0x200002a4
 80016f4:	200002ec 	.word	0x200002ec
 80016f8:	20000210 	.word	0x20000210
 80016fc:	2000020c 	.word	0x2000020c
 8001700:	200002f8 	.word	0x200002f8
 8001704:	200002f4 	.word	0x200002f4
 8001708:	e000ed04 	.word	0xe000ed04

0800170c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001716:	4b75      	ldr	r3, [pc, #468]	; (80018ec <xTaskIncrementTick+0x1e0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 80dc 	bne.w	80018d8 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001720:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <xTaskIncrementTick+0x1e4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001728:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <xTaskIncrementTick+0x1e4>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d110      	bne.n	8001756 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <xTaskIncrementTick+0x1e8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <xTaskIncrementTick+0x1ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6d      	ldr	r2, [pc, #436]	; (80018f4 <xTaskIncrementTick+0x1e8>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4a6d      	ldr	r2, [pc, #436]	; (80018f8 <xTaskIncrementTick+0x1ec>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <xTaskIncrementTick+0x1f0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a6b      	ldr	r2, [pc, #428]	; (80018fc <xTaskIncrementTick+0x1f0>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	f000 fb05 	bl	8001d60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <xTaskIncrementTick+0x1f4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	429a      	cmp	r2, r3
 800175e:	f0c0 80a6 	bcc.w	80018ae <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001762:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <xTaskIncrementTick+0x1e8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <xTaskIncrementTick+0x1f4>)
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	601a      	str	r2, [r3, #0]
                    break;
 8001774:	e09b      	b.n	80018ae <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <xTaskIncrementTick+0x1e8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d203      	bcs.n	8001796 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800178e:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <xTaskIncrementTick+0x1f4>)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001794:	e08b      	b.n	80018ae <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68d2      	ldr	r2, [r2, #12]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	6892      	ldr	r2, [r2, #8]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3304      	adds	r3, #4
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d103      	bne.n	80017c4 <xTaskIncrementTick+0xb8>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01e      	beq.n	800181a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	6a12      	ldr	r2, [r2, #32]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	69d2      	ldr	r2, [r2, #28]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3318      	adds	r3, #24
 80017fe:	429a      	cmp	r2, r3
 8001800:	d103      	bne.n	800180a <xTaskIncrementTick+0xfe>
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	2201      	movs	r2, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <xTaskIncrementTick+0x1f8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	4a36      	ldr	r2, [pc, #216]	; (8001904 <xTaskIncrementTick+0x1f8>)
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <xTaskIncrementTick+0x1fc>)
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	3204      	adds	r2, #4
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1d1a      	adds	r2, r3, #4
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4a26      	ldr	r2, [pc, #152]	; (8001908 <xTaskIncrementTick+0x1fc>)
 8001870:	441a      	add	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187a:	4923      	ldr	r1, [pc, #140]	; (8001908 <xTaskIncrementTick+0x1fc>)
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	481f      	ldr	r0, [pc, #124]	; (8001908 <xTaskIncrementTick+0x1fc>)
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4403      	add	r3, r0
 8001896:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <xTaskIncrementTick+0x200>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f4ff af5d 	bcc.w	8001762 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018ac:	e759      	b.n	8001762 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <xTaskIncrementTick+0x200>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4914      	ldr	r1, [pc, #80]	; (8001908 <xTaskIncrementTick+0x1fc>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d901      	bls.n	80018ca <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <xTaskIncrementTick+0x204>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e004      	b.n	80018e2 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <xTaskIncrementTick+0x208>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <xTaskIncrementTick+0x208>)
 80018e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80018e2:	69fb      	ldr	r3, [r7, #28]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000030c 	.word	0x2000030c
 80018f0:	200002e8 	.word	0x200002e8
 80018f4:	2000029c 	.word	0x2000029c
 80018f8:	200002a0 	.word	0x200002a0
 80018fc:	200002fc 	.word	0x200002fc
 8001900:	20000304 	.word	0x20000304
 8001904:	200002ec 	.word	0x200002ec
 8001908:	20000210 	.word	0x20000210
 800190c:	2000020c 	.word	0x2000020c
 8001910:	200002f8 	.word	0x200002f8
 8001914:	200002f4 	.word	0x200002f4

08001918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <vTaskSwitchContext+0x78>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <vTaskSwitchContext+0x7c>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800192c:	e02a      	b.n	8001984 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <vTaskSwitchContext+0x7c>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <vTaskSwitchContext+0x80>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f1c3 031f 	rsb	r3, r3, #31
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <vTaskSwitchContext+0x84>)
 8001956:	4413      	add	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3308      	adds	r3, #8
 800196c:	429a      	cmp	r2, r3
 800196e:	d104      	bne.n	800197a <vTaskSwitchContext+0x62>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <vTaskSwitchContext+0x88>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000030c 	.word	0x2000030c
 8001994:	200002f8 	.word	0x200002f8
 8001998:	200002ec 	.word	0x200002ec
 800199c:	20000210 	.word	0x20000210
 80019a0:	2000020c 	.word	0x2000020c

080019a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <vTaskPlaceOnEventList+0x28>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3318      	adds	r3, #24
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff f8a1 	bl	8000afe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019bc:	2101      	movs	r1, #1
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f000 f9e8 	bl	8001d94 <prvAddCurrentTaskToDelayedList>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000020c 	.word	0x2000020c

080019d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	6a12      	ldr	r2, [r2, #32]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69d2      	ldr	r2, [r2, #28]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	3318      	adds	r3, #24
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d103      	bne.n	8001a0e <xTaskRemoveFromEventList+0x3e>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2200      	movs	r2, #0
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1e5a      	subs	r2, r3, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <xTaskRemoveFromEventList+0x178>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d15e      	bne.n	8001ae4 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	68d2      	ldr	r2, [r2, #12]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	6892      	ldr	r2, [r2, #8]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3304      	adds	r3, #4
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d103      	bne.n	8001a54 <xTaskRemoveFromEventList+0x84>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <xTaskRemoveFromEventList+0x17c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <xTaskRemoveFromEventList+0x17c>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7a:	4935      	ldr	r1, [pc, #212]	; (8001b50 <xTaskRemoveFromEventList+0x180>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3304      	adds	r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	3204      	adds	r2, #4
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1d1a      	adds	r2, r3, #4
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <xTaskRemoveFromEventList+0x180>)
 8001aba:	441a      	add	r2, r3
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <xTaskRemoveFromEventList+0x180>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	481e      	ldr	r0, [pc, #120]	; (8001b50 <xTaskRemoveFromEventList+0x180>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4403      	add	r3, r0
 8001ae0:	6019      	str	r1, [r3, #0]
 8001ae2:	e01b      	b.n	8001b1c <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <xTaskRemoveFromEventList+0x184>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	61da      	str	r2, [r3, #28]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	621a      	str	r2, [r3, #32]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	3218      	adds	r2, #24
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f103 0218 	add.w	r2, r3, #24
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <xTaskRemoveFromEventList+0x184>)
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <xTaskRemoveFromEventList+0x184>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <xTaskRemoveFromEventList+0x184>)
 8001b1a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <xTaskRemoveFromEventList+0x188>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d905      	bls.n	8001b36 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <xTaskRemoveFromEventList+0x18c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e001      	b.n	8001b3a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3724      	adds	r7, #36	; 0x24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000030c 	.word	0x2000030c
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	20000210 	.word	0x20000210
 8001b54:	200002a4 	.word	0x200002a4
 8001b58:	2000020c 	.word	0x2000020c
 8001b5c:	200002f8 	.word	0x200002f8

08001b60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <vTaskInternalSetTimeOutState+0x24>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <vTaskInternalSetTimeOutState+0x28>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200002fc 	.word	0x200002fc
 8001b88:	200002e8 	.word	0x200002e8

08001b8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8001b96:	f000 fa09 	bl	8001fac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <xTaskCheckForTimeOut+0x8c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb2:	d102      	bne.n	8001bba <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e026      	b.n	8001c08 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <xTaskCheckForTimeOut+0x90>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d00a      	beq.n	8001bdc <xTaskCheckForTimeOut+0x50>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d305      	bcc.n	8001bdc <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e015      	b.n	8001c08 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d20b      	bcs.n	8001bfe <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffb4 	bl	8001b60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e004      	b.n	8001c08 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001c08:	f000 f9e8 	bl	8001fdc <vPortExitCritical>

    return xReturn;
 8001c0c:	697b      	ldr	r3, [r7, #20]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002e8 	.word	0x200002e8
 8001c1c:	200002fc 	.word	0x200002fc

08001c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <vTaskMissedYield+0x14>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200002f8 	.word	0x200002f8

08001c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c40:	f000 f852 	bl	8001ce8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <prvIdleTask+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d9f9      	bls.n	8001c40 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <prvIdleTask+0x2c>)
 8001c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c5c:	e7f0      	b.n	8001c40 <prvIdleTask+0x8>
 8001c5e:	bf00      	nop
 8001c60:	20000210 	.word	0x20000210
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	e00c      	b.n	8001c8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <prvInitialiseTaskLists+0x60>)
 8001c80:	4413      	add	r3, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff10 	bl	8000aa8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d9ef      	bls.n	8001c74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <prvInitialiseTaskLists+0x64>)
 8001c96:	f7fe ff07 	bl	8000aa8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <prvInitialiseTaskLists+0x68>)
 8001c9c:	f7fe ff04 	bl	8000aa8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <prvInitialiseTaskLists+0x6c>)
 8001ca2:	f7fe ff01 	bl	8000aa8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <prvInitialiseTaskLists+0x70>)
 8001ca8:	f7fe fefe 	bl	8000aa8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <prvInitialiseTaskLists+0x74>)
 8001cae:	f7fe fefb 	bl	8000aa8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <prvInitialiseTaskLists+0x78>)
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <prvInitialiseTaskLists+0x64>)
 8001cb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <prvInitialiseTaskLists+0x7c>)
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <prvInitialiseTaskLists+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000210 	.word	0x20000210
 8001ccc:	20000274 	.word	0x20000274
 8001cd0:	20000288 	.word	0x20000288
 8001cd4:	200002a4 	.word	0x200002a4
 8001cd8:	200002b8 	.word	0x200002b8
 8001cdc:	200002d0 	.word	0x200002d0
 8001ce0:	2000029c 	.word	0x2000029c
 8001ce4:	200002a0 	.word	0x200002a0

08001ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cee:	e019      	b.n	8001d24 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001cf0:	f000 f95c 	bl	8001fac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <prvCheckTasksWaitingTermination+0x4c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff34 	bl	8000b6e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <prvCheckTasksWaitingTermination+0x50>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <prvCheckTasksWaitingTermination+0x50>)
 8001d0e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <prvCheckTasksWaitingTermination+0x54>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <prvCheckTasksWaitingTermination+0x54>)
 8001d18:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001d1a:	f000 f95f 	bl	8001fdc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f80e 	bl	8001d40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <prvCheckTasksWaitingTermination+0x54>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e1      	bne.n	8001cf0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200002b8 	.word	0x200002b8
 8001d38:	200002e4 	.word	0x200002e4
 8001d3c:	200002cc 	.word	0x200002cc

08001d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fa6b 	bl	8002228 <vPortFree>
                vPortFree( pxTCB );
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fa68 	bl	8002228 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <prvResetNextTaskUnblockTime+0x2c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <prvResetNextTaskUnblockTime+0x30>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d76:	e005      	b.n	8001d84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <prvResetNextTaskUnblockTime+0x2c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <prvResetNextTaskUnblockTime+0x30>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	2000029c 	.word	0x2000029c
 8001d90:	20000304 	.word	0x20000304

08001d94 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fedf 	bl	8000b6e <uxListRemove>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10b      	bne.n	8001dce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <prvAddCurrentTaskToDelayedList+0xec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <prvAddCurrentTaskToDelayedList+0xec>)
 8001dcc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d124      	bne.n	8001e20 <prvAddCurrentTaskToDelayedList+0x8c>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d021      	beq.n	8001e20 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	6892      	ldr	r2, [r2, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	3204      	adds	r2, #4
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1d1a      	adds	r2, r3, #4
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e1e:	e026      	b.n	8001e6e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d209      	bcs.n	8001e4c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3304      	adds	r3, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f7fe fe5a 	bl	8000afe <vListInsert>
}
 8001e4a:	e010      	b.n	8001e6e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <prvAddCurrentTaskToDelayedList+0xf8>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3304      	adds	r3, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f7fe fe50 	bl	8000afe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d202      	bcs.n	8001e6e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002e8 	.word	0x200002e8
 8001e7c:	2000020c 	.word	0x2000020c
 8001e80:	200002ec 	.word	0x200002ec
 8001e84:	200002d0 	.word	0x200002d0
 8001e88:	200002a0 	.word	0x200002a0
 8001e8c:	2000029c 	.word	0x2000029c
 8001e90:	20000304 	.word	0x20000304

08001e94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b04      	subs	r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f023 0201 	bic.w	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3b04      	subs	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001ec4:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <pxPortInitialiseStack+0x54>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3b14      	subs	r3, #20
 8001ece:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b20      	subs	r3, #32
 8001eda:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001edc:	68fb      	ldr	r3, [r7, #12]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	08001eed 	.word	0x08001eed

08001eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ef6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001f08:	bf00      	nop
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0fc      	beq.n	8001f0a <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	0000      	movs	r0, r0
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <pxCurrentTCBConst2>)
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	6808      	ldr	r0, [r1, #0]
 8001f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f2a:	f380 8809 	msr	PSP, r0
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f380 8811 	msr	BASEPRI, r0
 8001f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001f3e:	4770      	bx	lr

08001f40 <pxCurrentTCBConst2>:
 8001f40:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop

08001f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <prvPortStartFirstTask+0x1c>)
 8001f4a:	6800      	ldr	r0, [r0, #0]
 8001f4c:	6800      	ldr	r0, [r0, #0]
 8001f4e:	f380 8808 	msr	MSP, r0
 8001f52:	b662      	cpsie	i
 8001f54:	b661      	cpsie	f
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	df00      	svc	0
 8001f60:	bf00      	nop
 8001f62:	0000      	.short	0x0000
 8001f64:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop

08001f6c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <xPortStartScheduler+0x38>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <xPortStartScheduler+0x38>)
 8001f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <xPortStartScheduler+0x38>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <xPortStartScheduler+0x38>)
 8001f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001f88:	f000 f886 	bl	8002098 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <xPortStartScheduler+0x3c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001f92:	f7ff ffd9 	bl	8001f48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001f96:	f7ff fcbf 	bl	8001918 <vTaskSwitchContext>
    prvTaskExitError();
 8001f9a:	f7ff ffa7 	bl	8001eec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	e000ed20 	.word	0xe000ed20
 8001fa8:	20000004 	.word	0x20000004

08001fac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <vPortEnterCritical+0x2c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <vPortEnterCritical+0x2c>)
 8001fcc:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000004 	.word	0x20000004

08001fdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <vPortExitCritical+0x2c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <vPortExitCritical+0x2c>)
 8001fea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <vPortExitCritical+0x2c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <vPortExitCritical+0x22>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000004 	.word	0x20000004
 800200c:	00000000 	.word	0x00000000

08002010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002010:	f3ef 8009 	mrs	r0, PSP
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <pxCurrentTCBConst>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002020:	6010      	str	r0, [r2, #0]
 8002022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002026:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800202a:	f380 8811 	msr	BASEPRI, r0
 800202e:	f7ff fc73 	bl	8001918 <vTaskSwitchContext>
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f380 8811 	msr	BASEPRI, r0
 800203a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	6808      	ldr	r0, [r1, #0]
 8002042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002046:	f380 8809 	msr	PSP, r0
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	4770      	bx	lr

08002050 <pxCurrentTCBConst>:
 8002050:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop

08002058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
        __asm volatile
 800205e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002070:	f7ff fb4c 	bl	800170c <xTaskIncrementTick>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SysTick_Handler+0x3c>)
 800207c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	e000ed04 	.word	0xe000ed04

08002098 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <vPortSetupTimerInterrupt+0x24>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <vPortSetupTimerInterrupt+0x28>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <vPortSetupTimerInterrupt+0x2c>)
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <vPortSetupTimerInterrupt+0x30>)
 80020ac:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <vPortSetupTimerInterrupt+0x24>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	e000e010 	.word	0xe000e010
 80020c0:	e000e018 	.word	0xe000e018
 80020c4:	e000e014 	.word	0xe000e014
 80020c8:	0001193f 	.word	0x0001193f

080020cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80020d8:	f7ff fa1e 	bl	8001518 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <pvPortMalloc+0x144>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80020e4:	f000 f8e0 	bl	80022a8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <pvPortMalloc+0x148>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 8086 	bne.w	8002202 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01e      	beq.n	800213a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80020fc:	2208      	movs	r2, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d218      	bcs.n	800213a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8002108:	2208      	movs	r2, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	2b00      	cmp	r3, #0
 8002118:	d011      	beq.n	800213e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f023 0307 	bic.w	r3, r3, #7
 8002120:	3308      	adds	r3, #8
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d205      	bcs.n	8002134 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	3308      	adds	r3, #8
 8002130:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002132:	e004      	b.n	800213e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002138:	e001      	b.n	800213e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05e      	beq.n	8002202 <pvPortMalloc+0x136>
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <pvPortMalloc+0x14c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d859      	bhi.n	8002202 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <pvPortMalloc+0x150>)
 8002150:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <pvPortMalloc+0x150>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002158:	e004      	b.n	8002164 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d903      	bls.n	8002176 <pvPortMalloc+0xaa>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f1      	bne.n	800215a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <pvPortMalloc+0x144>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d040      	beq.n	8002202 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2208      	movs	r2, #8
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1ad2      	subs	r2, r2, r3
 800219a:	2308      	movs	r3, #8
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	429a      	cmp	r2, r3
 80021a0:	d90f      	bls.n	80021c2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad2      	subs	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f000 f8d5 	bl	800236c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <pvPortMalloc+0x14c>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <pvPortMalloc+0x14c>)
 80021ce:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <pvPortMalloc+0x14c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <pvPortMalloc+0x154>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d203      	bcs.n	80021e4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <pvPortMalloc+0x14c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <pvPortMalloc+0x154>)
 80021e2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <pvPortMalloc+0x148>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <pvPortMalloc+0x158>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <pvPortMalloc+0x158>)
 8002200:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002202:	f7ff f997 	bl	8001534 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20001318 	.word	0x20001318
 8002214:	2000132c 	.word	0x2000132c
 8002218:	2000131c 	.word	0x2000131c
 800221c:	20001310 	.word	0x20001310
 8002220:	20001320 	.word	0x20001320
 8002224:	20001324 	.word	0x20001324

08002228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d02c      	beq.n	8002294 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800223a:	2308      	movs	r3, #8
 800223c:	425b      	negs	r3, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <vPortFree+0x74>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01e      	beq.n	8002294 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11a      	bne.n	8002294 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <vPortFree+0x74>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	43db      	mvns	r3, r3
 8002268:	401a      	ands	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800226e:	f7ff f953 	bl	8001518 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <vPortFree+0x78>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <vPortFree+0x78>)
 800227e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002280:	68b8      	ldr	r0, [r7, #8]
 8002282:	f000 f873 	bl	800236c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <vPortFree+0x7c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <vPortFree+0x7c>)
 800228e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002290:	f7ff f950 	bl	8001534 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000132c 	.word	0x2000132c
 80022a0:	2000131c 	.word	0x2000131c
 80022a4:	20001328 	.word	0x20001328

080022a8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <prvHeapInit+0xac>)
 80022b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3307      	adds	r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <prvHeapInit+0xac>)
 80022d8:	4413      	add	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <prvHeapInit+0xb0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <prvHeapInit+0xb0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80022f4:	2208      	movs	r2, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <prvHeapInit+0xb4>)
 8002308:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <prvHeapInit+0xb4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <prvHeapInit+0xb4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <prvHeapInit+0xb4>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <prvHeapInit+0xb8>)
 8002336:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <prvHeapInit+0xbc>)
 800233e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <prvHeapInit+0xc0>)
 8002342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000310 	.word	0x20000310
 8002358:	20001310 	.word	0x20001310
 800235c:	20001318 	.word	0x20001318
 8002360:	20001320 	.word	0x20001320
 8002364:	2000131c 	.word	0x2000131c
 8002368:	2000132c 	.word	0x2000132c

0800236c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <prvInsertBlockIntoFreeList+0xa8>)
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e002      	b.n	8002380 <prvInsertBlockIntoFreeList+0x14>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d8f7      	bhi.n	800237a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	d108      	bne.n	80023ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	441a      	add	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	441a      	add	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d118      	bne.n	80023f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <prvInsertBlockIntoFreeList+0xac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d00d      	beq.n	80023ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e008      	b.n	80023fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <prvInsertBlockIntoFreeList+0xac>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e003      	b.n	80023fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d002      	beq.n	800240a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20001310 	.word	0x20001310
 8002418:	20001318 	.word	0x20001318

0800241c <RSA_Encryption>:
 */



double RSA_Encryption(double  original_mess , double n , double e)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002426:	e9c7 2300 	strd	r2, r3, [r7]
	double Encreipted_Mess =0;
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	e9c7 3404 	strd	r3, r4, [r7, #16]
	Encreipted_Mess =pow(original_mess,e);
 8002436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800243a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800243e:	f001 f9bb 	bl	80037b8 <pow>
 8002442:	e9c7 0104 	strd	r0, r1, [r7, #16]
	Encreipted_Mess= fmod(Encreipted_Mess,n);
 8002446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800244a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800244e:	f001 f957 	bl	8003700 <fmod>
 8002452:	e9c7 0104 	strd	r0, r1, [r7, #16]
	return Encreipted_Mess;
 8002456:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800245a:	4618      	mov	r0, r3
 800245c:	4621      	mov	r1, r4
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <RSA_Calc_Euler>:


double RSA_Calc_Euler(double p, double q)
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800246e:	e9c7 2300 	strd	r2, r3, [r7]
	double euler1 = (p-1)*(q-1);
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <RSA_Calc_Euler+0x54>)
 8002478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800247c:	f7fd fe84 	bl	8000188 <__aeabi_dsub>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	4625      	mov	r5, r4
 8002486:	461c      	mov	r4, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <RSA_Calc_Euler+0x54>)
 800248e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002492:	f7fd fe79 	bl	8000188 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	f7fe f82b 	bl	80004f8 <__aeabi_dmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	460c      	mov	r4, r1
 80024a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return euler1;
 80024aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	4621      	mov	r1, r4
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	3ff00000 	.word	0x3ff00000

080024bc <RSA_Calc_N>:

int RSA_Calc_N(double p, double q)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024c6:	e9c7 2300 	strd	r2, r3, [r7]
	double n1 = p * q;
 80024ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d2:	f7fe f811 	bl	80004f8 <__aeabi_dmul>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return n1;
 80024de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024e2:	f7fe fab9 	bl	8000a58 <__aeabi_d2iz>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}

080024f0 <gcd>:

int gcd(int a, int b)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	int t;
	while(1) {
		t= a%b;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	fb93 f2f2 	sdiv	r2, r3, r2
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	fb01 f202 	mul.w	r2, r1, r2
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
		if(t==0)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <gcd+0x26>
			return b;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	e004      	b.n	8002520 <gcd+0x30>
		a = b;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	607b      	str	r3, [r7, #4]
		b= t;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	603b      	str	r3, [r7, #0]
		t= a%b;
 800251e:	e7ec      	b.n	80024fa <gcd+0xa>
	}
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <RSA_Generate_e>:

double RSA_Generate_e(double euler)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	e9c7 0100 	strd	r0, r1, [r7]
	double e =2;
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800253e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	//public key
	//e stands for encrypt
	double temp;
	e=2;
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800254a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	//for checking that 1 < e < phi(n) and gcd(e, phi(n)) = 1; i.e., e and phi(n) are coprime.
	while(e<euler) {
 800254e:	e02a      	b.n	80025a6 <RSA_Generate_e+0x7a>
		temp = gcd(e,euler);
 8002550:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002554:	f7fe fa80 	bl	8000a58 <__aeabi_d2iz>
 8002558:	4604      	mov	r4, r0
 800255a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800255e:	f7fe fa7b 	bl	8000a58 <__aeabi_d2iz>
 8002562:	4603      	mov	r3, r0
 8002564:	4619      	mov	r1, r3
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff ffc2 	bl	80024f0 <gcd>
 800256c:	4603      	mov	r3, r0
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ff58 	bl	8000424 <__aeabi_i2d>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(temp==1)
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <RSA_Generate_e+0xa0>)
 8002582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002586:	f7fe fa1f 	bl	80009c8 <__aeabi_dcmpeq>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d114      	bne.n	80025ba <RSA_Generate_e+0x8e>
			break;
		else
			e++;
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <RSA_Generate_e+0xa0>)
 8002596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800259a:	f7fd fdf7 	bl	800018c <__adddf3>
 800259e:	4603      	mov	r3, r0
 80025a0:	460c      	mov	r4, r1
 80025a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while(e<euler) {
 80025a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ae:	f7fe fa15 	bl	80009dc <__aeabi_dcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1cb      	bne.n	8002550 <RSA_Generate_e+0x24>
 80025b8:	e000      	b.n	80025bc <RSA_Generate_e+0x90>
			break;
 80025ba:	bf00      	nop
	}
	return e;
 80025bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	4621      	mov	r1, r4
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	3ff00000 	.word	0x3ff00000

080025d0 <RSA_Decryption_Calc_d>:
	Original_Mess=fmod(m,n);
	return Original_Mess;
}

double RSA_Decryption_Calc_d(double Euler, double e)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80025da:	e9c7 2300 	strd	r2, r3, [r7]
	double d = 0;
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	//private key
	//d stands for decrypt
	//choosing d such that it satisfies d*e = 1 mod phi
	double d1 = 1 / e;
 80025ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	490b      	ldr	r1, [pc, #44]	; (8002620 <RSA_Decryption_Calc_d+0x50>)
 80025f4:	f7fe f8aa 	bl	800074c <__aeabi_ddiv>
 80025f8:	4603      	mov	r3, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = fmod(d1, Euler);
 8002600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002608:	f001 f87a 	bl	8003700 <fmod>
 800260c:	e9c7 0106 	strd	r0, r1, [r7, #24]

	return d;
 8002610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
 8002614:	4618      	mov	r0, r3
 8002616:	4621      	mov	r1, r4
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	3ff00000 	.word	0x3ff00000

08002624 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <EXTI0_IRQHandler+0x1c>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <EXTI0_IRQHandler+0x1c>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <EXTI0_IRQHandler+0x20>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4798      	blx	r3

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40010400 	.word	0x40010400
 8002644:	20001378 	.word	0x20001378

08002648 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <EXTI1_IRQHandler+0x1c>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <EXTI1_IRQHandler+0x1c>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <EXTI1_IRQHandler+0x20>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4798      	blx	r3

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40010400 	.word	0x40010400
 8002668:	20001378 	.word	0x20001378

0800266c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <EXTI2_IRQHandler+0x1c>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <EXTI2_IRQHandler+0x1c>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <EXTI2_IRQHandler+0x20>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4798      	blx	r3
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40010400 	.word	0x40010400
 800268c:	20001378 	.word	0x20001378

08002690 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <EXTI3_IRQHandler+0x1c>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <EXTI3_IRQHandler+0x1c>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <EXTI3_IRQHandler+0x20>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4798      	blx	r3
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40010400 	.word	0x40010400
 80026b0:	20001378 	.word	0x20001378

080026b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <EXTI4_IRQHandler+0x1c>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <EXTI4_IRQHandler+0x1c>)
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <EXTI4_IRQHandler+0x20>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4798      	blx	r3
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40010400 	.word	0x40010400
 80026d4:	20001378 	.word	0x20001378

080026d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <EXTI9_5_IRQHandler+0x22>
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 80026ee:	f043 0320 	orr.w	r3, r3, #32
 80026f2:	6153      	str	r3, [r2, #20]
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <EXTI9_5_IRQHandler+0xa4>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <EXTI9_5_IRQHandler+0x40>
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 800270c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002710:	6153      	str	r3, [r2, #20]
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <EXTI9_5_IRQHandler+0xa4>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <EXTI9_5_IRQHandler+0x5e>
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	6153      	str	r3, [r2, #20]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <EXTI9_5_IRQHandler+0xa4>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <EXTI9_5_IRQHandler+0x7c>
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6153      	str	r3, [r2, #20]
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <EXTI9_5_IRQHandler+0xa4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <EXTI9_5_IRQHandler+0x9a>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <EXTI9_5_IRQHandler+0xa0>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6153      	str	r3, [r2, #20]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <EXTI9_5_IRQHandler+0xa4>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	4798      	blx	r3

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40010400 	.word	0x40010400
 800277c:	20001378 	.word	0x20001378

08002780 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <EXTI15_10_IRQHandler+0x18>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <EXTI15_10_IRQHandler+0x18>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6153      	str	r3, [r2, #20]

}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40010400 	.word	0x40010400

0800279c <MCAL_UART_INIT>:
 * note -                   -none
 *
 */
/**================================================================= */
void MCAL_UART_INIT(USART_TypeDef* USARTx,USART_Config * UART_Config)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

	uint32_t pclk ,BRR;


	//Enable Clock For Given USART Peripheral
	if(USARTx == USART1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a68      	ldr	r2, [pc, #416]	; (800294c <MCAL_UART_INIT+0x1b0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10e      	bne.n	80027cc <MCAL_UART_INIT+0x30>
	{
		RCC_USART1_CLOCK_EN();
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	4a67      	ldr	r2, [pc, #412]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0] = *UART_Config;
 80027ba:	4a66      	ldr	r2, [pc, #408]	; (8002954 <MCAL_UART_INIT+0x1b8>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4614      	mov	r4, r2
 80027c0:	461d      	mov	r5, r3
 80027c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	e026      	b.n	800281a <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a62      	ldr	r2, [pc, #392]	; (8002958 <MCAL_UART_INIT+0x1bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d10f      	bne.n	80027f4 <MCAL_UART_INIT+0x58>
	{
		RCC_USART2_CLOCK_EN();
 80027d4:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1] = *UART_Config;
 80027e0:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <MCAL_UART_INIT+0x1b8>)
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	f103 0414 	add.w	r4, r3, #20
 80027e8:	4615      	mov	r5, r2
 80027ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	e012      	b.n	800281a <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a59      	ldr	r2, [pc, #356]	; (800295c <MCAL_UART_INIT+0x1c0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10e      	bne.n	800281a <MCAL_UART_INIT+0x7e>
	{
		RCC_USART3_CLOCK_EN();
 80027fc:	4b54      	ldr	r3, [pc, #336]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4a53      	ldr	r2, [pc, #332]	; (8002950 <MCAL_UART_INIT+0x1b4>)
 8002802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002806:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2] = *UART_Config;
 8002808:	4b52      	ldr	r3, [pc, #328]	; (8002954 <MCAL_UART_INIT+0x1b8>)
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002810:	4615      	mov	r5, r2
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	6023      	str	r3, [r4, #0]
	}

	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= UART_Config->USART_MODE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |=UART_Config->PayLoad_Length;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	7a12      	ldrb	r2, [r2, #8]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]

	//Baud Rate
	USARTx->CR1 |=UART_Config->BaudRate;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |=UART_Config->Parity;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	7a52      	ldrb	r2, [r2, #9]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60da      	str	r2, [r3, #12]

	//StopBits
	USARTx->CR1 |=UART_Config->StopBits;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	7a92      	ldrb	r2, [r2, #10]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]

	//HW_FlowCtrl
	USARTx->CR1 |=UART_Config->HW_FlowCtrl;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	7ad2      	ldrb	r2, [r2, #11]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60da      	str	r2, [r3, #12]

	//IRQ_Enable
	USARTx->CR1 |=UART_Config->IRQ_Enable;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	7b12      	ldrb	r2, [r2, #12]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <MCAL_UART_INIT+0x1b0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <MCAL_UART_INIT+0xfc>
	{
		pclk=MCAL_RCC_Get_PCLK2_Freq();
 8002890:	f000 fb26 	bl	8002ee0 <MCAL_RCC_Get_PCLK2_Freq>
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	e002      	b.n	800289e <MCAL_UART_INIT+0x102>
	}
	else
	{
		pclk=MCAL_RCC_Get_PCLK1_Freq();
 8002898:	f000 fb0e 	bl	8002eb8 <MCAL_RCC_Get_PCLK1_Freq>
 800289c:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_REGISTER(pclk,UART_Config->BaudRate);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	0119      	lsls	r1, r3, #4
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	2064      	movs	r0, #100	; 0x64
 80028d0:	fb00 f303 	mul.w	r3, r0, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <MCAL_UART_INIT+0x1c4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	430b      	orrs	r3, r1
 80028e6:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]

	/*Enable/Disable interrupt*/
	//USART_CR1
	if( UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7b1b      	ldrb	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d026      	beq.n	8002944 <MCAL_UART_INIT+0x1a8>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	7b12      	ldrb	r2, [r2, #12]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]

		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <MCAL_UART_INIT+0x1b0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d106      	bne.n	800291a <MCAL_UART_INIT+0x17e>
		{
			NVIC_IRQ37_USART1_ENABLE();
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
		}

	}

}
 8002918:	e014      	b.n	8002944 <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <MCAL_UART_INIT+0x1bc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d106      	bne.n	8002930 <MCAL_UART_INIT+0x194>
			NVIC_IRQ38_USART2_ENABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	e009      	b.n	8002944 <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <MCAL_UART_INIT+0x1c0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d105      	bne.n	8002944 <MCAL_UART_INIT+0x1a8>
			NVIC_IRQ39_USART3_ENABLE();
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a09      	ldr	r2, [pc, #36]	; (8002964 <MCAL_UART_INIT+0x1c8>)
 800293e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bdb0      	pop	{r4, r5, r7, pc}
 800294c:	40013800 	.word	0x40013800
 8002950:	40021000 	.word	0x40021000
 8002954:	200013b4 	.word	0x200013b4
 8002958:	40004400 	.word	0x40004400
 800295c:	40004800 	.word	0x40004800
 8002960:	51eb851f 	.word	0x51eb851f
 8002964:	e000e104 	.word	0xe000e104

08002968 <Which_UART>:
}

/*
 * This functions is used by uart driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_TypeDef* USARTx){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <Which_UART+0x38>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <Which_UART+0x14>
	{
		return 0;
 8002978:	2300      	movs	r3, #0
 800297a:	e00c      	b.n	8002996 <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <Which_UART+0x3c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <Which_UART+0x20>
	{
		return 1;
 8002984:	2301      	movs	r3, #1
 8002986:	e006      	b.n	8002996 <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <Which_UART+0x40>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <Which_UART+0x2c>
	{
		return 3;
 8002990:	2303      	movs	r3, #3
 8002992:	e000      	b.n	8002996 <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 8002994:	2304      	movs	r3, #4
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40004400 	.word	0x40004400
 80029a8:	40004800 	.word	0x40004800

080029ac <MCAL_UART_SEND_DATA>:
void MCAL_UART_SEND_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]

	//Wait until TXE flag is set in SR
	if(PollengEn == enable)
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <MCAL_UART_SEND_DATA+0x22>
	{
		while(! (USARTx->SR & (1<<7)) );
 80029c0:	bf00      	nop
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f9      	beq.n	80029c2 <MCAL_UART_SEND_DATA+0x16>
	}

	uint8_t Gindex=Which_UART(USARTx);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ffca 	bl	8002968 <Which_UART>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
	}
	else
	{
		//If 8Bit
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]
	}



}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <MCAL_UART_RECEIVE_DATA>:


void MCAL_UART_RECEIVE_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]

	if(PollengEn == enable)
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <MCAL_UART_RECEIVE_DATA+0x22>
	{
		//wait till RXNE flag is set in the SR
		while(! (USARTx->SR & (1<<5)) );
 8002a00:	bf00      	nop
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f9      	beq.n	8002a02 <MCAL_UART_RECEIVE_DATA+0x16>
	}

	//check the USART_PayLoad_Length (9B or 8B)
	uint8_t Gindex=Which_UART(USARTx);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff ffaa 	bl	8002968 <Which_UART>
 8002a14:	4603      	mov	r3, r0
 8002a16:	75fb      	strb	r3, [r7, #23]

	}
	else //8Bit
	{
		//8Bit & no parity
		if(Global_UART_Config[Gindex].Parity == USART_Parity_NONE)
 8002a18:	7dfa      	ldrb	r2, [r7, #23]
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <MCAL_UART_RECEIVE_DATA+0x6c>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3309      	adds	r3, #9
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <MCAL_UART_RECEIVE_DATA+0x52>
		{
			//no parity so all 8bit consider as data
			*((uint16_t*) pTXBuffer) = (USARTx->DR & (uint8_t)0xFF) ;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	801a      	strh	r2, [r3, #0]
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}


}
 8002a3c:	e007      	b.n	8002a4e <MCAL_UART_RECEIVE_DATA+0x62>
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	801a      	strh	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200013b4 	.word	0x200013b4

08002a5c <MCAL_UART_GPIO_Set_Pins>:

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configure_t PinCfg;
	if( USARTx == USART1 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <MCAL_UART_GPIO_Set_Pins+0x1a8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d13f      	bne.n	8002aec <MCAL_UART_GPIO_Set_Pins+0x90>
		 * PA11 ->CTS
		 * PA12 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_9;
 8002a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a70:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002a72:	2306      	movs	r3, #6
 8002a74:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4861      	ldr	r0, [pc, #388]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002a82:	f000 f94c 	bl	8002d1e <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4619      	mov	r1, r3
 8002a96:	485c      	ldr	r0, [pc, #368]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002a98:	f000 f941 	bl	8002d1e <MCAL_GPIO_Init>

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8002a9c:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002a9e:	7adb      	ldrb	r3, [r3, #11]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <MCAL_UART_GPIO_Set_Pins+0x50>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002aa6:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <MCAL_UART_GPIO_Set_Pins+0x66>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8002aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ab0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4619      	mov	r1, r3
 8002abc:	4852      	ldr	r0, [pc, #328]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002abe:	f000 f92e 	bl	8002d1e <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002ac4:	7adb      	ldrb	r3, [r3, #11]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <MCAL_UART_GPIO_Set_Pins+0x76>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002aca:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002acc:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <MCAL_UART_GPIO_Set_Pins+0x90>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_12;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002ad8:	2306      	movs	r3, #6
 8002ada:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4848      	ldr	r0, [pc, #288]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002ae8:	f000 f919 	bl	8002d1e <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART2 )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a48      	ldr	r2, [pc, #288]	; (8002c10 <MCAL_UART_GPIO_Set_Pins+0x1b4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d13b      	bne.n	8002b6c <MCAL_UART_GPIO_Set_Pins+0x110>
		 * PA0 ->CTS
		 * PA1 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_2;
 8002af4:	2304      	movs	r3, #4
 8002af6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002af8:	2306      	movs	r3, #6
 8002afa:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	4840      	ldr	r0, [pc, #256]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002b08:	f000 f909 	bl	8002d1e <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_3;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8002b10:	2308      	movs	r3, #8
 8002b12:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4619      	mov	r1, r3
 8002b1a:	483b      	ldr	r0, [pc, #236]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002b1c:	f000 f8ff 	bl	8002d1e <MCAL_GPIO_Init>

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002b22:	7fdb      	ldrb	r3, [r3, #31]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <MCAL_UART_GPIO_Set_Pins+0xd4>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002b2a:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <MCAL_UART_GPIO_Set_Pins+0xe8>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_0;
 8002b30:	2301      	movs	r3, #1
 8002b32:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4832      	ldr	r0, [pc, #200]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002b40:	f000 f8ed 	bl	8002d1e <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002b46:	7fdb      	ldrb	r3, [r3, #31]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <MCAL_UART_GPIO_Set_Pins+0xf8>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002b4e:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <MCAL_UART_GPIO_Set_Pins+0x110>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_1;
 8002b54:	2302      	movs	r3, #2
 8002b56:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002b58:	2306      	movs	r3, #6
 8002b5a:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	4828      	ldr	r0, [pc, #160]	; (8002c08 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002b68:	f000 f8d9 	bl	8002d1e <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART3 )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <MCAL_UART_GPIO_Set_Pins+0x1b8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d143      	bne.n	8002bfc <MCAL_UART_GPIO_Set_Pins+0x1a0>
		 * PB13 ->CTS
		 * PB14 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 8002b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b78:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4619      	mov	r1, r3
 8002b88:	4823      	ldr	r0, [pc, #140]	; (8002c18 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002b8a:	f000 f8c8 	bl	8002d1e <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8002b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b92:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8002b94:	2308      	movs	r3, #8
 8002b96:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481e      	ldr	r0, [pc, #120]	; (8002c18 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002ba0:	f000 f8bd 	bl	8002d1e <MCAL_GPIO_Init>


		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002ba6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <MCAL_UART_GPIO_Set_Pins+0x15c>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002bb0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <MCAL_UART_GPIO_Set_Pins+0x172>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_13;
 8002bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bbc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4813      	ldr	r0, [pc, #76]	; (8002c18 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002bca:	f000 f8a8 	bl	8002d1e <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002bd0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <MCAL_UART_GPIO_Set_Pins+0x186>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002bda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <MCAL_UART_GPIO_Set_Pins+0x1a0>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_14;
 8002be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002be6:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002be8:	2306      	movs	r3, #6
 8002bea:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002bf8:	f000 f891 	bl	8002d1e <MCAL_GPIO_Init>
		}

	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40010800 	.word	0x40010800
 8002c0c:	200013b4 	.word	0x200013b4
 8002c10:	40004400 	.word	0x40004400
 8002c14:	40004800 	.word	0x40004800
 8002c18:	40010c00 	.word	0x40010c00

08002c1c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <USART1_IRQHandler+0x10>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4798      	blx	r3

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200013b4 	.word	0x200013b4

08002c30 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 8002c34:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <USART2_IRQHandler+0x10>)
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	4798      	blx	r3

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200013b4 	.word	0x200013b4

08002c44 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <USART3_IRQHandler+0x10>)
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	4798      	blx	r3

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200013b4 	.word	0x200013b4

08002c58 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d042      	beq.n	8002cee <Get_CRLH_Postion+0x96>
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	dc11      	bgt.n	8002c90 <Get_CRLH_Postion+0x38>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d036      	beq.n	8002cde <Get_CRLH_Postion+0x86>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	dc06      	bgt.n	8002c82 <Get_CRLH_Postion+0x2a>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d02e      	beq.n	8002cd6 <Get_CRLH_Postion+0x7e>
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d02e      	beq.n	8002cda <Get_CRLH_Postion+0x82>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d028      	beq.n	8002cd2 <Get_CRLH_Postion+0x7a>
 8002c80:	e047      	b.n	8002d12 <Get_CRLH_Postion+0xba>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d02f      	beq.n	8002ce6 <Get_CRLH_Postion+0x8e>
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d02f      	beq.n	8002cea <Get_CRLH_Postion+0x92>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d029      	beq.n	8002ce2 <Get_CRLH_Postion+0x8a>
 8002c8e:	e040      	b.n	8002d12 <Get_CRLH_Postion+0xba>
 8002c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c94:	d033      	beq.n	8002cfe <Get_CRLH_Postion+0xa6>
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	dc09      	bgt.n	8002cb0 <Get_CRLH_Postion+0x58>
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca0:	d029      	beq.n	8002cf6 <Get_CRLH_Postion+0x9e>
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d028      	beq.n	8002cfa <Get_CRLH_Postion+0xa2>
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cac:	d021      	beq.n	8002cf2 <Get_CRLH_Postion+0x9a>
 8002cae:	e030      	b.n	8002d12 <Get_CRLH_Postion+0xba>
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d027      	beq.n	8002d06 <Get_CRLH_Postion+0xae>
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	dc03      	bgt.n	8002cc4 <Get_CRLH_Postion+0x6c>
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d01f      	beq.n	8002d02 <Get_CRLH_Postion+0xaa>
 8002cc2:	e026      	b.n	8002d12 <Get_CRLH_Postion+0xba>
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc8:	d01f      	beq.n	8002d0a <Get_CRLH_Postion+0xb2>
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d01e      	beq.n	8002d0e <Get_CRLH_Postion+0xb6>
 8002cd0:	e01f      	b.n	8002d12 <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e01e      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e01c      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e01a      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8002cde:	230c      	movs	r3, #12
 8002ce0:	e018      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	e016      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8002ce6:	2314      	movs	r3, #20
 8002ce8:	e014      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8002cea:	2318      	movs	r3, #24
 8002cec:	e012      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8002cee:	231c      	movs	r3, #28
 8002cf0:	e010      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e00e      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e00c      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	e00a      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8002cfe:	230c      	movs	r3, #12
 8002d00:	e008      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8002d02:	2310      	movs	r3, #16
 8002d04:	e006      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8002d06:	2314      	movs	r3, #20
 8002d08:	e004      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8002d0a:	2318      	movs	r3, #24
 8002d0c:	e002      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8002d0e:	231c      	movs	r3, #28
 8002d10:	e000      	b.n	8002d14 <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 8002d12:	2300      	movs	r3, #0
		break;

	}
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 8002d1e:	b590      	push	{r4, r7, lr}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2bff      	cmp	r3, #255	; 0xff
 8002d36:	d801      	bhi.n	8002d3c <MCAL_GPIO_Init+0x1e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	e001      	b.n	8002d40 <MCAL_GPIO_Init+0x22>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff86 	bl	8002c58 <Get_CRLH_Postion>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	230f      	movs	r3, #15
 8002d52:	4093      	lsls	r3, r2
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d00b      	beq.n	8002d80 <MCAL_GPIO_Init+0x62>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	789b      	ldrb	r3, [r3, #2]
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d007      	beq.n	8002d80 <MCAL_GPIO_Init+0x62>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	789b      	ldrb	r3, [r3, #2]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d003      	beq.n	8002d80 <MCAL_GPIO_Init+0x62>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	789b      	ldrb	r3, [r3, #2]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d10e      	bne.n	8002d9e <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	789b      	ldrb	r3, [r3, #2]
 8002d84:	3b04      	subs	r3, #4
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	b25a      	sxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	78db      	ldrb	r3, [r3, #3]
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e028      	b.n	8002df0 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	789b      	ldrb	r3, [r3, #2]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	789b      	ldrb	r3, [r3, #2]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e01c      	b.n	8002df0 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	789b      	ldrb	r3, [r3, #2]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d102      	bne.n	8002dc4 <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e015      	b.n	8002df0 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	789b      	ldrb	r3, [r3, #2]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d107      	bne.n	8002de0 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e007      	b.n	8002df0 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	43d2      	mvns	r2, r2
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8002df0:	7bfc      	ldrb	r4, [r7, #15]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff2e 	bl	8002c58 <Get_CRLH_Postion>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	fa04 f203 	lsl.w	r2, r4, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 8002e36:	e006      	b.n	8002e46 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60da      	str	r2, [r3, #12]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00a      	beq.n	8002e78 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d302      	bcc.n	8002e6c <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d002      	beq.n	8002e70 <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 8002e6a:	e003      	b.n	8002e74 <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 8002e6e:	e005      	b.n	8002e7c <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 8002e72:	e003      	b.n	8002e7c <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e001      	b.n	8002e7c <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 8002e78:	bf00      	nop
		break;

	}
	return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40021000 	.word	0x40021000
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	00f42400 	.word	0x00f42400

08002e90 <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 8002e94:	f7ff ffdc 	bl	8002e50 <MCAL_RCC_Get_SYS_CLKFreq>
 8002e98:	4601      	mov	r1, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	09db      	lsrs	r3, r3, #7
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	08004ad8 	.word	0x08004ad8

08002eb8 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 8002ebc:	f7ff ffe8 	bl	8002e90 <MCAL_RCC_Get_HCLK_Freq>
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08004ad0 	.word	0x08004ad0

08002ee0 <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 8002ee4:	f7ff ffd4 	bl	8002e90 <MCAL_RCC_Get_HCLK_Freq>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0adb      	lsrs	r3, r3, #11
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08004ad0 	.word	0x08004ad0

08002f08 <USART2_callBack>:
char Buff_NewLine[2] = "\n";



void USART2_callBack(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
	MCAL_UART_RECEIVE_DATA(USART2, &Rec_Data_UART2, disable);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	491c      	ldr	r1, [pc, #112]	; (8002f80 <USART2_callBack+0x78>)
 8002f10:	481c      	ldr	r0, [pc, #112]	; (8002f84 <USART2_callBack+0x7c>)
 8002f12:	f7ff fd6b 	bl	80029ec <MCAL_UART_RECEIVE_DATA>
	MCAL_UART_SEND_DATA(USART2, &Rec_Data_UART2, disable);
 8002f16:	2201      	movs	r2, #1
 8002f18:	4919      	ldr	r1, [pc, #100]	; (8002f80 <USART2_callBack+0x78>)
 8002f1a:	481a      	ldr	r0, [pc, #104]	; (8002f84 <USART2_callBack+0x7c>)
 8002f1c:	f7ff fd46 	bl	80029ac <MCAL_UART_SEND_DATA>
	if(Flg_Syn_InISR == 0)
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <USART2_callBack+0x80>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10e      	bne.n	8002f48 <USART2_callBack+0x40>
	{
		// Convert the received string to a decimal value
		Temp_Rcv_Ogn_Msg = atoi(&Rec_Data_UART2) * 10;
 8002f2a:	4815      	ldr	r0, [pc, #84]	; (8002f80 <USART2_callBack+0x78>)
 8002f2c:	f000 fa9b 	bl	8003466 <atoi>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <USART2_callBack+0x84>)
 8002f3e:	601a      	str	r2, [r3, #0]
		Flg_Syn_InISR = 1;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <USART2_callBack+0x80>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
		USART2_Rcv_Original_Message = Temp_Rcv_Ogn_Msg + atoi(&Rec_Data_UART2);
		xSemaphoreGive(xSmphor_Desply_Orig_Mass);
		xSemaphoreGive(xSmphor_Start_Encryption);
		Flg_Syn_InISR = 0;
	}
}
 8002f46:	e019      	b.n	8002f7c <USART2_callBack+0x74>
		USART2_Rcv_Original_Message = Temp_Rcv_Ogn_Msg + atoi(&Rec_Data_UART2);
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <USART2_callBack+0x78>)
 8002f4a:	f000 fa8c 	bl	8003466 <atoi>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <USART2_callBack+0x84>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <USART2_callBack+0x88>)
 8002f58:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(xSmphor_Desply_Orig_Mass);
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <USART2_callBack+0x8c>)
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	f7fd ff0a 	bl	8000d7c <xQueueGenericSend>
		xSemaphoreGive(xSmphor_Start_Encryption);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <USART2_callBack+0x90>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	f7fd ff03 	bl	8000d7c <xQueueGenericSend>
		Flg_Syn_InISR = 0;
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <USART2_callBack+0x80>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20001422 	.word	0x20001422
 8002f84:	40004400 	.word	0x40004400
 8002f88:	20001374 	.word	0x20001374
 8002f8c:	20001370 	.word	0x20001370
 8002f90:	2000136c 	.word	0x2000136c
 8002f94:	20001368 	.word	0x20001368
 8002f98:	20001364 	.word	0x20001364

08002f9c <main>:
void Fun_UART_Init(char UARTx);
void RSA_Calc_Init(void);
/*=====================================*/

int main(void)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af02      	add	r7, sp, #8
	RCC_GPIOC_CLOCK_EN();
 8002fa2:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <main+0x11c>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4a44      	ldr	r2, [pc, #272]	; (80030b8 <main+0x11c>)
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLOCK_EN();
 8002fae:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <main+0x11c>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4a41      	ldr	r2, [pc, #260]	; (80030b8 <main+0x11c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <main+0x11c>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4a3e      	ldr	r2, [pc, #248]	; (80030b8 <main+0x11c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6193      	str	r3, [r2, #24]
	Fun_UART_Init(UART_1);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f000 f896 	bl	80030f8 <Fun_UART_Init>
	Fun_UART_Init(UART_2);
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f000 f893 	bl	80030f8 <Fun_UART_Init>


	//Init Led Pin13 PortC
	GPIO_Pin_Configure_t PIn13_CFG;
	PIn13_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	70bb      	strb	r3, [r7, #2]
	PIn13_CFG.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	70fb      	strb	r3, [r7, #3]
	PIn13_CFG.GPIO_Pin_Number=GPIO_PIN_13;
 8002fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fde:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC,&PIn13_CFG);
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4835      	ldr	r0, [pc, #212]	; (80030bc <main+0x120>)
 8002fe6:	f7ff fe9a 	bl	8002d1e <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff0:	4832      	ldr	r0, [pc, #200]	; (80030bc <main+0x120>)
 8002ff2:	f7ff ff0f 	bl	8002e14 <MCAL_GPIO_WritePin>


	RSA_Calc_Init();
 8002ff6:	f000 f8cd 	bl	8003194 <RSA_Calc_Init>

	strcpy(Buf_Print_Trsm_Org_Msg ,"Transmit The Original Msg: ");
 8002ffa:	4a31      	ldr	r2, [pc, #196]	; (80030c0 <main+0x124>)
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <main+0x128>)
 8002ffe:	4615      	mov	r5, r2
 8003000:	461c      	mov	r4, r3
 8003002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003004:	6028      	str	r0, [r5, #0]
 8003006:	6069      	str	r1, [r5, #4]
 8003008:	60aa      	str	r2, [r5, #8]
 800300a:	60eb      	str	r3, [r5, #12]
 800300c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800300e:	6128      	str	r0, [r5, #16]
 8003010:	6169      	str	r1, [r5, #20]
 8003012:	61aa      	str	r2, [r5, #24]
	for (int i = 0; i < strlen(Buf_Print_Trsm_Org_Msg); ++i)
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	e00a      	b.n	8003030 <main+0x94>
	{
		MCAL_UART_SEND_DATA(USART2,&Buf_Print_Trsm_Org_Msg[i], disable);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <main+0x124>)
 800301e:	4413      	add	r3, r2
 8003020:	2201      	movs	r2, #1
 8003022:	4619      	mov	r1, r3
 8003024:	4828      	ldr	r0, [pc, #160]	; (80030c8 <main+0x12c>)
 8003026:	f7ff fcc1 	bl	80029ac <MCAL_UART_SEND_DATA>
	for (int i = 0; i < strlen(Buf_Print_Trsm_Org_Msg); ++i)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	4823      	ldr	r0, [pc, #140]	; (80030c0 <main+0x124>)
 8003032:	f7fd f89d 	bl	8000170 <strlen>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d8ed      	bhi.n	800301a <main+0x7e>
	}


	//Semaphores Creation
	xSmphor_Dsply_Encrpted_Mess = xSemaphoreCreateBinary();
 800303e:	2203      	movs	r2, #3
 8003040:	2100      	movs	r1, #0
 8003042:	2001      	movs	r0, #1
 8003044:	f7fd fe36 	bl	8000cb4 <xQueueGenericCreate>
 8003048:	4602      	mov	r2, r0
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <main+0x130>)
 800304c:	601a      	str	r2, [r3, #0]
	xSmphor_Start_Encryption = xSemaphoreCreateBinary();
 800304e:	2203      	movs	r2, #3
 8003050:	2100      	movs	r1, #0
 8003052:	2001      	movs	r0, #1
 8003054:	f7fd fe2e 	bl	8000cb4 <xQueueGenericCreate>
 8003058:	4602      	mov	r2, r0
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <main+0x134>)
 800305c:	601a      	str	r2, [r3, #0]
	xSmphor_Desply_Orig_Mass = xSemaphoreCreateBinary();
 800305e:	2203      	movs	r2, #3
 8003060:	2100      	movs	r1, #0
 8003062:	2001      	movs	r0, #1
 8003064:	f7fd fe26 	bl	8000cb4 <xQueueGenericCreate>
 8003068:	4602      	mov	r2, r0
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <main+0x138>)
 800306c:	601a      	str	r2, [r3, #0]


	/*===============Tasks Creation===============*/
	xTaskCreate(Original_massage_task1, "Original_massage_task1", 128, NULL, 1, xOriginal_massage_Task1_Handle);
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <main+0x13c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2301      	movs	r3, #1
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	4917      	ldr	r1, [pc, #92]	; (80030dc <main+0x140>)
 800307e:	4818      	ldr	r0, [pc, #96]	; (80030e0 <main+0x144>)
 8003080:	f7fe f8a0 	bl	80011c4 <xTaskCreate>
	xTaskCreate(EncryptionTask2, "EncryptionTask2", 128, NULL, 2, xEncryptionTask2_Handle);
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <main+0x148>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2302      	movs	r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2300      	movs	r3, #0
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	4915      	ldr	r1, [pc, #84]	; (80030e8 <main+0x14c>)
 8003094:	4815      	ldr	r0, [pc, #84]	; (80030ec <main+0x150>)
 8003096:	f7fe f895 	bl	80011c4 <xTaskCreate>
	xTaskCreate(Desplay_EncryptedTask3, "EncryptionTask2", 128, NULL, 2, xDesplay_EncryptedTask3_Handle);
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <main+0x154>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2302      	movs	r3, #2
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	490f      	ldr	r1, [pc, #60]	; (80030e8 <main+0x14c>)
 80030aa:	4812      	ldr	r0, [pc, #72]	; (80030f4 <main+0x158>)
 80030ac:	f7fe f88a 	bl	80011c4 <xTaskCreate>


	//Scheduler Start
	vTaskStartScheduler();
 80030b0:	f7fe f9f8 	bl	80014a4 <vTaskStartScheduler>

	while(1)
 80030b4:	e7fe      	b.n	80030b4 <main+0x118>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40011000 	.word	0x40011000
 80030c0:	200013f0 	.word	0x200013f0
 80030c4:	08004a40 	.word	0x08004a40
 80030c8:	40004400 	.word	0x40004400
 80030cc:	20001360 	.word	0x20001360
 80030d0:	20001364 	.word	0x20001364
 80030d4:	20001368 	.word	0x20001368
 80030d8:	20001354 	.word	0x20001354
 80030dc:	08004a5c 	.word	0x08004a5c
 80030e0:	08003229 	.word	0x08003229
 80030e4:	20001358 	.word	0x20001358
 80030e8:	08004a74 	.word	0x08004a74
 80030ec:	080032ad 	.word	0x080032ad
 80030f0:	2000135c 	.word	0x2000135c
 80030f4:	08003331 	.word	0x08003331

080030f8 <Fun_UART_Init>:
}


/*===========Functions Definition========*/
void Fun_UART_Init(char UARTx)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
	if(UARTx == 1)
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d11d      	bne.n	8003144 <Fun_UART_Init+0x4c>
	{
		USART_Config uart1CFG;
		uart1CFG.BaudRate = USART_BaudRate_115200;
 8003108:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800310c:	623b      	str	r3, [r7, #32]
		uart1CFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uart1CFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 8003114:	2320      	movs	r3, #32
 8003116:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		//uart1CFG.P_IRQ_Call_Back = USART1_callBack;
		uart1CFG.Parity = USART_Parity_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uart1CFG.PayLoad_Length = USART_PayLoad_Length_8B;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uart1CFG.StopBits = USART_StopBits_1;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uart1CFG.USART_MODE = USART_MODE_RX_AND_TX;
 800312c:	230c      	movs	r3, #12
 800312e:	773b      	strb	r3, [r7, #28]
		MCAL_UART_INIT(USART1, &uart1CFG);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4814      	ldr	r0, [pc, #80]	; (8003188 <Fun_UART_Init+0x90>)
 8003138:	f7ff fb30 	bl	800279c <MCAL_UART_INIT>
		MCAL_UART_GPIO_Set_Pins(USART1);
 800313c:	4812      	ldr	r0, [pc, #72]	; (8003188 <Fun_UART_Init+0x90>)
 800313e:	f7ff fc8d 	bl	8002a5c <MCAL_UART_GPIO_Set_Pins>
		uartCFG.StopBits = USART_StopBits_1;
		uartCFG.USART_MODE = USART_MODE_RX_AND_TX;
		MCAL_UART_INIT(USART2, &uartCFG);
		MCAL_UART_GPIO_Set_Pins(USART2);
	}
}
 8003142:	e01c      	b.n	800317e <Fun_UART_Init+0x86>
	else if (UARTx == 2)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d119      	bne.n	800317e <Fun_UART_Init+0x86>
		uartCFG.BaudRate = USART_BaudRate_115200;
 800314a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800314e:	60fb      	str	r3, [r7, #12]
		uartCFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 8003150:	2300      	movs	r3, #0
 8003152:	74fb      	strb	r3, [r7, #19]
		uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 8003154:	2320      	movs	r3, #32
 8003156:	753b      	strb	r3, [r7, #20]
		uartCFG.P_IRQ_Call_Back = USART2_callBack;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <Fun_UART_Init+0x94>)
 800315a:	61bb      	str	r3, [r7, #24]
		uartCFG.Parity = USART_Parity_NONE;
 800315c:	2300      	movs	r3, #0
 800315e:	747b      	strb	r3, [r7, #17]
		uartCFG.PayLoad_Length = USART_PayLoad_Length_8B;
 8003160:	2300      	movs	r3, #0
 8003162:	743b      	strb	r3, [r7, #16]
		uartCFG.StopBits = USART_StopBits_1;
 8003164:	2300      	movs	r3, #0
 8003166:	74bb      	strb	r3, [r7, #18]
		uartCFG.USART_MODE = USART_MODE_RX_AND_TX;
 8003168:	230c      	movs	r3, #12
 800316a:	723b      	strb	r3, [r7, #8]
		MCAL_UART_INIT(USART2, &uartCFG);
 800316c:	f107 0308 	add.w	r3, r7, #8
 8003170:	4619      	mov	r1, r3
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <Fun_UART_Init+0x98>)
 8003174:	f7ff fb12 	bl	800279c <MCAL_UART_INIT>
		MCAL_UART_GPIO_Set_Pins(USART2);
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <Fun_UART_Init+0x98>)
 800317a:	f7ff fc6f 	bl	8002a5c <MCAL_UART_GPIO_Set_Pins>
}
 800317e:	bf00      	nop
 8003180:	3730      	adds	r7, #48	; 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40013800 	.word	0x40013800
 800318c:	08002f09 	.word	0x08002f09
 8003190:	40004400 	.word	0x40004400

08003194 <RSA_Calc_Init>:
void RSA_Calc_Init(void)
{
 8003194:	b598      	push	{r3, r4, r7, lr}
 8003196:	af00      	add	r7, sp, #0
	euler=RSA_Calc_Euler(p,q);
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <RSA_Calc_Init+0x7c>)
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <RSA_Calc_Init+0x80>)
 80031a0:	cb18      	ldmia	r3, {r3, r4}
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7ff f95d 	bl	8002464 <RSA_Calc_Euler>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <RSA_Calc_Init+0x84>)
 80031b0:	e9c2 3400 	strd	r3, r4, [r2]
	n=RSA_Calc_N(p,q);
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <RSA_Calc_Init+0x7c>)
 80031b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <RSA_Calc_Init+0x80>)
 80031bc:	cb18      	ldmia	r3, {r3, r4}
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	f7ff f97b 	bl	80024bc <RSA_Calc_N>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f92b 	bl	8000424 <__aeabi_i2d>
 80031ce:	4603      	mov	r3, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <RSA_Calc_Init+0x88>)
 80031d4:	e9c2 3400 	strd	r3, r4, [r2]
	e=RSA_Generate_e(euler);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <RSA_Calc_Init+0x84>)
 80031da:	cb18      	ldmia	r3, {r3, r4}
 80031dc:	4618      	mov	r0, r3
 80031de:	4621      	mov	r1, r4
 80031e0:	f7ff f9a4 	bl	800252c <RSA_Generate_e>
 80031e4:	4603      	mov	r3, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <RSA_Calc_Init+0x8c>)
 80031ea:	e9c2 3400 	strd	r3, r4, [r2]
	d =RSA_Decryption_Calc_d(euler,e);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <RSA_Calc_Init+0x84>)
 80031f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <RSA_Calc_Init+0x8c>)
 80031f6:	cb18      	ldmia	r3, {r3, r4}
 80031f8:	461a      	mov	r2, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	f7ff f9e8 	bl	80025d0 <RSA_Decryption_Calc_d>
 8003200:	4603      	mov	r3, r0
 8003202:	460c      	mov	r4, r1
 8003204:	4a07      	ldr	r2, [pc, #28]	; (8003224 <RSA_Calc_Init+0x90>)
 8003206:	e9c2 3400 	strd	r3, r4, [r2]
}
 800320a:	bf00      	nop
 800320c:	bd98      	pop	{r3, r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000008 	.word	0x20000008
 8003214:	20000010 	.word	0x20000010
 8003218:	20001330 	.word	0x20001330
 800321c:	20001338 	.word	0x20001338
 8003220:	20001340 	.word	0x20001340
 8003224:	20001348 	.word	0x20001348

08003228 <Original_massage_task1>:



/*==============System Tasks==========*/
void Original_massage_task1(void* params)
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b090      	sub	sp, #64	; 0x40
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	// Buffer to store the string representation of the decimal value
	char buffer[50] ="\nTransmit The Original Msg: ";
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <Original_massage_task1+0x78>)
 8003232:	f107 0408 	add.w	r4, r7, #8
 8003236:	461d      	mov	r5, r3
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003240:	c407      	stmia	r4!, {r0, r1, r2}
 8003242:	7023      	strb	r3, [r4, #0]
 8003244:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
 8003254:	751a      	strb	r2, [r3, #20]
	while(1)
	{

		if(xSemaphoreTake(xSmphor_Desply_Orig_Mass , (TickType_t)5)==pdTRUE)
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <Original_massage_task1+0x7c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2105      	movs	r1, #5
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fe37 	bl	8000ed0 <xQueueSemaphoreTake>
 8003262:	4603      	mov	r3, r0
 8003264:	2b01      	cmp	r3, #1
 8003266:	d117      	bne.n	8003298 <Original_massage_task1+0x70>
		{
			for (int i = 0; i < strlen(buffer); ++i)
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326c:	e00b      	b.n	8003286 <Original_massage_task1+0x5e>
			{
				MCAL_UART_SEND_DATA(USART2,&buffer[i], disable);
 800326e:	f107 0208 	add.w	r2, r7, #8
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	4413      	add	r3, r2
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	480b      	ldr	r0, [pc, #44]	; (80032a8 <Original_massage_task1+0x80>)
 800327c:	f7ff fb96 	bl	80029ac <MCAL_UART_SEND_DATA>
			for (int i = 0; i < strlen(buffer); ++i)
 8003280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003282:	3301      	adds	r3, #1
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	4618      	mov	r0, r3
 800328c:	f7fc ff70 	bl	8000170 <strlen>
 8003290:	4602      	mov	r2, r0
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	429a      	cmp	r2, r3
 8003296:	d8ea      	bhi.n	800326e <Original_massage_task1+0x46>
			}

		}
		vTaskDelay(100);
 8003298:	2064      	movs	r0, #100	; 0x64
 800329a:	f7fe f8df 	bl	800145c <vTaskDelay>
		if(xSemaphoreTake(xSmphor_Desply_Orig_Mass , (TickType_t)5)==pdTRUE)
 800329e:	e7da      	b.n	8003256 <Original_massage_task1+0x2e>
 80032a0:	08004a84 	.word	0x08004a84
 80032a4:	20001368 	.word	0x20001368
 80032a8:	40004400 	.word	0x40004400

080032ac <EncryptionTask2>:
	}
}


void EncryptionTask2(void* params)
{
 80032ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Try to take the xSmphor_Start_Encryption
		if(xSemaphoreTake(xSmphor_Start_Encryption , (TickType_t)5)==pdTRUE)
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <EncryptionTask2+0x6c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2105      	movs	r1, #5
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fe08 	bl	8000ed0 <xQueueSemaphoreTake>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d123      	bne.n	800330e <EncryptionTask2+0x62>
		{
			Encryption_Message = (int)RSA_Encryption(USART2_Rcv_Original_Message, n, e);
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <EncryptionTask2+0x70>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f8aa 	bl	8000424 <__aeabi_i2d>
 80032d0:	4605      	mov	r5, r0
 80032d2:	460e      	mov	r6, r1
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <EncryptionTask2+0x74>)
 80032d6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <EncryptionTask2+0x78>)
 80032dc:	cb18      	ldmia	r3, {r3, r4}
 80032de:	e9cd 3400 	strd	r3, r4, [sp]
 80032e2:	4613      	mov	r3, r2
 80032e4:	460a      	mov	r2, r1
 80032e6:	4628      	mov	r0, r5
 80032e8:	4631      	mov	r1, r6
 80032ea:	f7ff f897 	bl	800241c <RSA_Encryption>
 80032ee:	4603      	mov	r3, r0
 80032f0:	460c      	mov	r4, r1
 80032f2:	4618      	mov	r0, r3
 80032f4:	4621      	mov	r1, r4
 80032f6:	f7fd fbaf 	bl	8000a58 <__aeabi_d2iz>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <EncryptionTask2+0x7c>)
 80032fe:	601a      	str	r2, [r3, #0]
			//Give the semaphore when the button state is changed
			xSemaphoreGive(xSmphor_Dsply_Encrpted_Mess);
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <EncryptionTask2+0x80>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	2300      	movs	r3, #0
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	f7fd fd37 	bl	8000d7c <xQueueGenericSend>
		}
		vTaskDelay(15);
 800330e:	200f      	movs	r0, #15
 8003310:	f7fe f8a4 	bl	800145c <vTaskDelay>
		if(xSemaphoreTake(xSmphor_Start_Encryption , (TickType_t)5)==pdTRUE)
 8003314:	e7ce      	b.n	80032b4 <EncryptionTask2+0x8>
 8003316:	bf00      	nop
 8003318:	20001364 	.word	0x20001364
 800331c:	2000136c 	.word	0x2000136c
 8003320:	20001338 	.word	0x20001338
 8003324:	20001340 	.word	0x20001340
 8003328:	20001350 	.word	0x20001350
 800332c:	20001360 	.word	0x20001360

08003330 <Desplay_EncryptedTask3>:
}



void Desplay_EncryptedTask3(void* params)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Try to take the xSmphor_Dsply_Encrpted_Mess
		if(xSemaphoreTake(xSmphor_Dsply_Encrpted_Mess , (TickType_t)5)==pdTRUE)
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <Desplay_EncryptedTask3+0xc8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2105      	movs	r1, #5
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fdc6 	bl	8000ed0 <xQueueSemaphoreTake>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d151      	bne.n	80033ee <Desplay_EncryptedTask3+0xbe>
		{
			// Buffer to store the string representation of the decimal value
			strcpy(buffer_Encryption ,"Encrypted massage is : ");
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <Desplay_EncryptedTask3+0xcc>)
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <Desplay_EncryptedTask3+0xd0>)
 800334e:	4615      	mov	r5, r2
 8003350:	461c      	mov	r4, r3
 8003352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003354:	6028      	str	r0, [r5, #0]
 8003356:	6069      	str	r1, [r5, #4]
 8003358:	60aa      	str	r2, [r5, #8]
 800335a:	60eb      	str	r3, [r5, #12]
 800335c:	cc03      	ldmia	r4!, {r0, r1}
 800335e:	6128      	str	r0, [r5, #16]
 8003360:	6169      	str	r1, [r5, #20]
			for (int i = 0; i < strlen(buffer_Encryption); ++i)
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e00a      	b.n	800337e <Desplay_EncryptedTask3+0x4e>
			{
				MCAL_UART_SEND_DATA(USART1,&buffer_Encryption[i], disable);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <Desplay_EncryptedTask3+0xcc>)
 800336c:	4413      	add	r3, r2
 800336e:	2201      	movs	r2, #1
 8003370:	4619      	mov	r1, r3
 8003372:	4824      	ldr	r0, [pc, #144]	; (8003404 <Desplay_EncryptedTask3+0xd4>)
 8003374:	f7ff fb1a 	bl	80029ac <MCAL_UART_SEND_DATA>
			for (int i = 0; i < strlen(buffer_Encryption); ++i)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	481f      	ldr	r0, [pc, #124]	; (80033fc <Desplay_EncryptedTask3+0xcc>)
 8003380:	f7fc fef6 	bl	8000170 <strlen>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8ed      	bhi.n	8003368 <Desplay_EncryptedTask3+0x38>
			}

			// Convert decimal value to string
			itoa(Encryption_Message, bufferToSendToUART1, 10);
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <Desplay_EncryptedTask3+0xd8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	220a      	movs	r2, #10
 8003392:	491e      	ldr	r1, [pc, #120]	; (800340c <Desplay_EncryptedTask3+0xdc>)
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f8ad 	bl	80034f4 <itoa>
			for (int i = 0; i < strlen(bufferToSendToUART1); ++i)
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e00a      	b.n	80033b6 <Desplay_EncryptedTask3+0x86>
			{
				MCAL_UART_SEND_DATA(USART1,&bufferToSendToUART1[i], disable);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4a1a      	ldr	r2, [pc, #104]	; (800340c <Desplay_EncryptedTask3+0xdc>)
 80033a4:	4413      	add	r3, r2
 80033a6:	2201      	movs	r2, #1
 80033a8:	4619      	mov	r1, r3
 80033aa:	4816      	ldr	r0, [pc, #88]	; (8003404 <Desplay_EncryptedTask3+0xd4>)
 80033ac:	f7ff fafe 	bl	80029ac <MCAL_UART_SEND_DATA>
			for (int i = 0; i < strlen(bufferToSendToUART1); ++i)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3301      	adds	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4815      	ldr	r0, [pc, #84]	; (800340c <Desplay_EncryptedTask3+0xdc>)
 80033b8:	f7fc feda 	bl	8000170 <strlen>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d8ed      	bhi.n	80033a0 <Desplay_EncryptedTask3+0x70>
			}
			//print new line
			for (int i = 0; i < strlen(Buff_NewLine); ++i)
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e00a      	b.n	80033e0 <Desplay_EncryptedTask3+0xb0>
			{
				MCAL_UART_SEND_DATA(USART1,&Buff_NewLine[i], disable);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a10      	ldr	r2, [pc, #64]	; (8003410 <Desplay_EncryptedTask3+0xe0>)
 80033ce:	4413      	add	r3, r2
 80033d0:	2201      	movs	r2, #1
 80033d2:	4619      	mov	r1, r3
 80033d4:	480b      	ldr	r0, [pc, #44]	; (8003404 <Desplay_EncryptedTask3+0xd4>)
 80033d6:	f7ff fae9 	bl	80029ac <MCAL_UART_SEND_DATA>
			for (int i = 0; i < strlen(Buff_NewLine); ++i)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3301      	adds	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <Desplay_EncryptedTask3+0xe0>)
 80033e2:	f7fc fec5 	bl	8000170 <strlen>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d8ed      	bhi.n	80033ca <Desplay_EncryptedTask3+0x9a>
			}

		}
		vTaskDelay(30);
 80033ee:	201e      	movs	r0, #30
 80033f0:	f7fe f834 	bl	800145c <vTaskDelay>
		if(xSemaphoreTake(xSmphor_Dsply_Encrpted_Mess , (TickType_t)5)==pdTRUE)
 80033f4:	e7a0      	b.n	8003338 <Desplay_EncryptedTask3+0x8>
 80033f6:	bf00      	nop
 80033f8:	20001360 	.word	0x20001360
 80033fc:	20001424 	.word	0x20001424
 8003400:	08004ab8 	.word	0x08004ab8
 8003404:	40013800 	.word	0x40013800
 8003408:	20001350 	.word	0x20001350
 800340c:	20001458 	.word	0x20001458
 8003410:	20000018 	.word	0x20000018

08003414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003414:	480d      	ldr	r0, [pc, #52]	; (800344c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003416:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <LoopForever+0x6>)
  ldr r1, =_edata
 800341e:	490d      	ldr	r1, [pc, #52]	; (8003454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <LoopForever+0xe>)
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003424:	e002      	b.n	800342c <LoopCopyDataInit>

08003426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342a:	3304      	adds	r3, #4

0800342c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800342c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003430:	d3f9      	bcc.n	8003426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003434:	4c0a      	ldr	r4, [pc, #40]	; (8003460 <LoopForever+0x16>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003438:	e001      	b.n	800343e <LoopFillZerobss>

0800343a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800343a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800343c:	3204      	adds	r2, #4

0800343e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003440:	d3fb      	bcc.n	800343a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003442:	f000 f81b 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003446:	f7ff fda9 	bl	8002f9c <main>

0800344a <LoopForever>:

LoopForever:
    b LoopForever
 800344a:	e7fe      	b.n	800344a <LoopForever>
  ldr   r0, =_estack
 800344c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8003450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003454:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003458:	08004c80 	.word	0x08004c80
  ldr r2, =_sbss
 800345c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003460:	20001464 	.word	0x20001464

08003464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003464:	e7fe      	b.n	8003464 <ADC1_2_IRQHandler>

08003466 <atoi>:
 8003466:	220a      	movs	r2, #10
 8003468:	2100      	movs	r1, #0
 800346a:	f000 b8d3 	b.w	8003614 <strtol>
	...

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000001c 	.word	0x2000001c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2500      	movs	r5, #0
 8003480:	4e0c      	ldr	r6, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1ba4      	subs	r4, r4, r6
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f001 fac8 	bl	8004a20 <_init>
 8003490:	2500      	movs	r5, #0
 8003492:	4e0a      	ldr	r6, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1ba4      	subs	r4, r4, r6
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08004c78 	.word	0x08004c78
 80034b8:	08004c78 	.word	0x08004c78
 80034bc:	08004c78 	.word	0x08004c78
 80034c0:	08004c7c 	.word	0x08004c7c

080034c4 <__itoa>:
 80034c4:	1e93      	subs	r3, r2, #2
 80034c6:	2b22      	cmp	r3, #34	; 0x22
 80034c8:	b510      	push	{r4, lr}
 80034ca:	460c      	mov	r4, r1
 80034cc:	d904      	bls.n	80034d8 <__itoa+0x14>
 80034ce:	2300      	movs	r3, #0
 80034d0:	461c      	mov	r4, r3
 80034d2:	700b      	strb	r3, [r1, #0]
 80034d4:	4620      	mov	r0, r4
 80034d6:	bd10      	pop	{r4, pc}
 80034d8:	2a0a      	cmp	r2, #10
 80034da:	d109      	bne.n	80034f0 <__itoa+0x2c>
 80034dc:	2800      	cmp	r0, #0
 80034de:	da07      	bge.n	80034f0 <__itoa+0x2c>
 80034e0:	232d      	movs	r3, #45	; 0x2d
 80034e2:	700b      	strb	r3, [r1, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	4240      	negs	r0, r0
 80034e8:	4421      	add	r1, r4
 80034ea:	f000 f8a9 	bl	8003640 <__utoa>
 80034ee:	e7f1      	b.n	80034d4 <__itoa+0x10>
 80034f0:	2100      	movs	r1, #0
 80034f2:	e7f9      	b.n	80034e8 <__itoa+0x24>

080034f4 <itoa>:
 80034f4:	f7ff bfe6 	b.w	80034c4 <__itoa>

080034f8 <memcpy>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	1e43      	subs	r3, r0, #1
 80034fc:	440a      	add	r2, r1
 80034fe:	4291      	cmp	r1, r2
 8003500:	d100      	bne.n	8003504 <memcpy+0xc>
 8003502:	bd10      	pop	{r4, pc}
 8003504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800350c:	e7f7      	b.n	80034fe <memcpy+0x6>

0800350e <memset>:
 800350e:	4603      	mov	r3, r0
 8003510:	4402      	add	r2, r0
 8003512:	4293      	cmp	r3, r2
 8003514:	d100      	bne.n	8003518 <memset+0xa>
 8003516:	4770      	bx	lr
 8003518:	f803 1b01 	strb.w	r1, [r3], #1
 800351c:	e7f9      	b.n	8003512 <memset+0x4>

0800351e <_strtol_l.isra.0>:
 800351e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003522:	4680      	mov	r8, r0
 8003524:	4689      	mov	r9, r1
 8003526:	4692      	mov	sl, r2
 8003528:	461e      	mov	r6, r3
 800352a:	460f      	mov	r7, r1
 800352c:	463d      	mov	r5, r7
 800352e:	9808      	ldr	r0, [sp, #32]
 8003530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003534:	f000 f8c2 	bl	80036bc <__locale_ctype_ptr_l>
 8003538:	4420      	add	r0, r4
 800353a:	7843      	ldrb	r3, [r0, #1]
 800353c:	f013 0308 	ands.w	r3, r3, #8
 8003540:	d132      	bne.n	80035a8 <_strtol_l.isra.0+0x8a>
 8003542:	2c2d      	cmp	r4, #45	; 0x2d
 8003544:	d132      	bne.n	80035ac <_strtol_l.isra.0+0x8e>
 8003546:	2201      	movs	r2, #1
 8003548:	787c      	ldrb	r4, [r7, #1]
 800354a:	1cbd      	adds	r5, r7, #2
 800354c:	2e00      	cmp	r6, #0
 800354e:	d05d      	beq.n	800360c <_strtol_l.isra.0+0xee>
 8003550:	2e10      	cmp	r6, #16
 8003552:	d109      	bne.n	8003568 <_strtol_l.isra.0+0x4a>
 8003554:	2c30      	cmp	r4, #48	; 0x30
 8003556:	d107      	bne.n	8003568 <_strtol_l.isra.0+0x4a>
 8003558:	782b      	ldrb	r3, [r5, #0]
 800355a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800355e:	2b58      	cmp	r3, #88	; 0x58
 8003560:	d14f      	bne.n	8003602 <_strtol_l.isra.0+0xe4>
 8003562:	2610      	movs	r6, #16
 8003564:	786c      	ldrb	r4, [r5, #1]
 8003566:	3502      	adds	r5, #2
 8003568:	2a00      	cmp	r2, #0
 800356a:	bf14      	ite	ne
 800356c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003570:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003574:	2700      	movs	r7, #0
 8003576:	fbb1 fcf6 	udiv	ip, r1, r6
 800357a:	4638      	mov	r0, r7
 800357c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003580:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003584:	2b09      	cmp	r3, #9
 8003586:	d817      	bhi.n	80035b8 <_strtol_l.isra.0+0x9a>
 8003588:	461c      	mov	r4, r3
 800358a:	42a6      	cmp	r6, r4
 800358c:	dd23      	ble.n	80035d6 <_strtol_l.isra.0+0xb8>
 800358e:	1c7b      	adds	r3, r7, #1
 8003590:	d007      	beq.n	80035a2 <_strtol_l.isra.0+0x84>
 8003592:	4584      	cmp	ip, r0
 8003594:	d31c      	bcc.n	80035d0 <_strtol_l.isra.0+0xb2>
 8003596:	d101      	bne.n	800359c <_strtol_l.isra.0+0x7e>
 8003598:	45a6      	cmp	lr, r4
 800359a:	db19      	blt.n	80035d0 <_strtol_l.isra.0+0xb2>
 800359c:	2701      	movs	r7, #1
 800359e:	fb00 4006 	mla	r0, r0, r6, r4
 80035a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035a6:	e7eb      	b.n	8003580 <_strtol_l.isra.0+0x62>
 80035a8:	462f      	mov	r7, r5
 80035aa:	e7bf      	b.n	800352c <_strtol_l.isra.0+0xe>
 80035ac:	2c2b      	cmp	r4, #43	; 0x2b
 80035ae:	bf04      	itt	eq
 80035b0:	1cbd      	addeq	r5, r7, #2
 80035b2:	787c      	ldrbeq	r4, [r7, #1]
 80035b4:	461a      	mov	r2, r3
 80035b6:	e7c9      	b.n	800354c <_strtol_l.isra.0+0x2e>
 80035b8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80035bc:	2b19      	cmp	r3, #25
 80035be:	d801      	bhi.n	80035c4 <_strtol_l.isra.0+0xa6>
 80035c0:	3c37      	subs	r4, #55	; 0x37
 80035c2:	e7e2      	b.n	800358a <_strtol_l.isra.0+0x6c>
 80035c4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80035c8:	2b19      	cmp	r3, #25
 80035ca:	d804      	bhi.n	80035d6 <_strtol_l.isra.0+0xb8>
 80035cc:	3c57      	subs	r4, #87	; 0x57
 80035ce:	e7dc      	b.n	800358a <_strtol_l.isra.0+0x6c>
 80035d0:	f04f 37ff 	mov.w	r7, #4294967295
 80035d4:	e7e5      	b.n	80035a2 <_strtol_l.isra.0+0x84>
 80035d6:	1c7b      	adds	r3, r7, #1
 80035d8:	d108      	bne.n	80035ec <_strtol_l.isra.0+0xce>
 80035da:	2322      	movs	r3, #34	; 0x22
 80035dc:	4608      	mov	r0, r1
 80035de:	f8c8 3000 	str.w	r3, [r8]
 80035e2:	f1ba 0f00 	cmp.w	sl, #0
 80035e6:	d107      	bne.n	80035f8 <_strtol_l.isra.0+0xda>
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	b102      	cbz	r2, 80035f0 <_strtol_l.isra.0+0xd2>
 80035ee:	4240      	negs	r0, r0
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	d0f8      	beq.n	80035e8 <_strtol_l.isra.0+0xca>
 80035f6:	b10f      	cbz	r7, 80035fc <_strtol_l.isra.0+0xde>
 80035f8:	f105 39ff 	add.w	r9, r5, #4294967295
 80035fc:	f8ca 9000 	str.w	r9, [sl]
 8003600:	e7f2      	b.n	80035e8 <_strtol_l.isra.0+0xca>
 8003602:	2430      	movs	r4, #48	; 0x30
 8003604:	2e00      	cmp	r6, #0
 8003606:	d1af      	bne.n	8003568 <_strtol_l.isra.0+0x4a>
 8003608:	2608      	movs	r6, #8
 800360a:	e7ad      	b.n	8003568 <_strtol_l.isra.0+0x4a>
 800360c:	2c30      	cmp	r4, #48	; 0x30
 800360e:	d0a3      	beq.n	8003558 <_strtol_l.isra.0+0x3a>
 8003610:	260a      	movs	r6, #10
 8003612:	e7a9      	b.n	8003568 <_strtol_l.isra.0+0x4a>

08003614 <strtol>:
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <strtol+0x24>)
 8003616:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	4d08      	ldr	r5, [pc, #32]	; (800363c <strtol+0x28>)
 800361c:	6a23      	ldr	r3, [r4, #32]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf08      	it	eq
 8003622:	462b      	moveq	r3, r5
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	460a      	mov	r2, r1
 800362a:	4601      	mov	r1, r0
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff ff76 	bl	800351e <_strtol_l.isra.0>
 8003632:	b003      	add	sp, #12
 8003634:	bd30      	pop	{r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	2000001c 	.word	0x2000001c
 800363c:	20000080 	.word	0x20000080

08003640 <__utoa>:
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	4605      	mov	r5, r0
 8003646:	460c      	mov	r4, r1
 8003648:	466e      	mov	r6, sp
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <__utoa+0x78>)
 800364c:	f103 0c20 	add.w	ip, r3, #32
 8003650:	4637      	mov	r7, r6
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	3308      	adds	r3, #8
 8003658:	c703      	stmia	r7!, {r0, r1}
 800365a:	4563      	cmp	r3, ip
 800365c:	463e      	mov	r6, r7
 800365e:	d1f7      	bne.n	8003650 <__utoa+0x10>
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	791b      	ldrb	r3, [r3, #4]
 8003664:	6038      	str	r0, [r7, #0]
 8003666:	713b      	strb	r3, [r7, #4]
 8003668:	1e93      	subs	r3, r2, #2
 800366a:	2b22      	cmp	r3, #34	; 0x22
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	d904      	bls.n	800367c <__utoa+0x3c>
 8003672:	7023      	strb	r3, [r4, #0]
 8003674:	461c      	mov	r4, r3
 8003676:	4620      	mov	r0, r4
 8003678:	b00b      	add	sp, #44	; 0x2c
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367c:	1e66      	subs	r6, r4, #1
 800367e:	fbb5 f0f2 	udiv	r0, r5, r2
 8003682:	fb02 5510 	mls	r5, r2, r0, r5
 8003686:	af0a      	add	r7, sp, #40	; 0x28
 8003688:	443d      	add	r5, r7
 800368a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003694:	4605      	mov	r5, r0
 8003696:	b968      	cbnz	r0, 80036b4 <__utoa+0x74>
 8003698:	4622      	mov	r2, r4
 800369a:	5460      	strb	r0, [r4, r1]
 800369c:	4423      	add	r3, r4
 800369e:	1b19      	subs	r1, r3, r4
 80036a0:	1b10      	subs	r0, r2, r4
 80036a2:	4281      	cmp	r1, r0
 80036a4:	dde7      	ble.n	8003676 <__utoa+0x36>
 80036a6:	7811      	ldrb	r1, [r2, #0]
 80036a8:	7818      	ldrb	r0, [r3, #0]
 80036aa:	f802 0b01 	strb.w	r0, [r2], #1
 80036ae:	f803 1901 	strb.w	r1, [r3], #-1
 80036b2:	e7f4      	b.n	800369e <__utoa+0x5e>
 80036b4:	460b      	mov	r3, r1
 80036b6:	e7e2      	b.n	800367e <__utoa+0x3e>
 80036b8:	08004ae8 	.word	0x08004ae8

080036bc <__locale_ctype_ptr_l>:
 80036bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80036c0:	4770      	bx	lr

080036c2 <__ascii_mbtowc>:
 80036c2:	b082      	sub	sp, #8
 80036c4:	b901      	cbnz	r1, 80036c8 <__ascii_mbtowc+0x6>
 80036c6:	a901      	add	r1, sp, #4
 80036c8:	b142      	cbz	r2, 80036dc <__ascii_mbtowc+0x1a>
 80036ca:	b14b      	cbz	r3, 80036e0 <__ascii_mbtowc+0x1e>
 80036cc:	7813      	ldrb	r3, [r2, #0]
 80036ce:	600b      	str	r3, [r1, #0]
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	1c10      	adds	r0, r2, #0
 80036d4:	bf18      	it	ne
 80036d6:	2001      	movne	r0, #1
 80036d8:	b002      	add	sp, #8
 80036da:	4770      	bx	lr
 80036dc:	4610      	mov	r0, r2
 80036de:	e7fb      	b.n	80036d8 <__ascii_mbtowc+0x16>
 80036e0:	f06f 0001 	mvn.w	r0, #1
 80036e4:	e7f8      	b.n	80036d8 <__ascii_mbtowc+0x16>

080036e6 <__ascii_wctomb>:
 80036e6:	b149      	cbz	r1, 80036fc <__ascii_wctomb+0x16>
 80036e8:	2aff      	cmp	r2, #255	; 0xff
 80036ea:	bf8b      	itete	hi
 80036ec:	238a      	movhi	r3, #138	; 0x8a
 80036ee:	700a      	strbls	r2, [r1, #0]
 80036f0:	6003      	strhi	r3, [r0, #0]
 80036f2:	2001      	movls	r0, #1
 80036f4:	bf88      	it	hi
 80036f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80036fa:	4770      	bx	lr
 80036fc:	4608      	mov	r0, r1
 80036fe:	4770      	bx	lr

08003700 <fmod>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	b08b      	sub	sp, #44	; 0x2c
 8003706:	461f      	mov	r7, r3
 8003708:	4604      	mov	r4, r0
 800370a:	460d      	mov	r5, r1
 800370c:	4616      	mov	r6, r2
 800370e:	f000 f9af 	bl	8003a70 <__ieee754_fmod>
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <fmod+0xb0>)
 8003714:	4680      	mov	r8, r0
 8003716:	f993 a000 	ldrsb.w	sl, [r3]
 800371a:	4689      	mov	r9, r1
 800371c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003720:	d030      	beq.n	8003784 <fmod+0x84>
 8003722:	4632      	mov	r2, r6
 8003724:	463b      	mov	r3, r7
 8003726:	4630      	mov	r0, r6
 8003728:	4639      	mov	r1, r7
 800372a:	f7fd f97f 	bl	8000a2c <__aeabi_dcmpun>
 800372e:	bb48      	cbnz	r0, 8003784 <fmod+0x84>
 8003730:	4622      	mov	r2, r4
 8003732:	462b      	mov	r3, r5
 8003734:	4620      	mov	r0, r4
 8003736:	4629      	mov	r1, r5
 8003738:	f7fd f978 	bl	8000a2c <__aeabi_dcmpun>
 800373c:	4683      	mov	fp, r0
 800373e:	bb08      	cbnz	r0, 8003784 <fmod+0x84>
 8003740:	2200      	movs	r2, #0
 8003742:	2300      	movs	r3, #0
 8003744:	4630      	mov	r0, r6
 8003746:	4639      	mov	r1, r7
 8003748:	f7fd f93e 	bl	80009c8 <__aeabi_dcmpeq>
 800374c:	b1d0      	cbz	r0, 8003784 <fmod+0x84>
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <fmod+0xb4>)
 8003754:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800375e:	f8cd b020 	str.w	fp, [sp, #32]
 8003762:	f1ba 0f00 	cmp.w	sl, #0
 8003766:	d112      	bne.n	800378e <fmod+0x8e>
 8003768:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800376c:	4668      	mov	r0, sp
 800376e:	f001 f84b 	bl	8004808 <matherr>
 8003772:	b1b8      	cbz	r0, 80037a4 <fmod+0xa4>
 8003774:	9b08      	ldr	r3, [sp, #32]
 8003776:	b11b      	cbz	r3, 8003780 <fmod+0x80>
 8003778:	f7ff fe7a 	bl	8003470 <__errno>
 800377c:	9b08      	ldr	r3, [sp, #32]
 800377e:	6003      	str	r3, [r0, #0]
 8003780:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003784:	4640      	mov	r0, r8
 8003786:	4649      	mov	r1, r9
 8003788:	b00b      	add	sp, #44	; 0x2c
 800378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378e:	2200      	movs	r2, #0
 8003790:	2300      	movs	r3, #0
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fc ffd9 	bl	800074c <__aeabi_ddiv>
 800379a:	f1ba 0f02 	cmp.w	sl, #2
 800379e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80037a2:	d1e3      	bne.n	800376c <fmod+0x6c>
 80037a4:	f7ff fe64 	bl	8003470 <__errno>
 80037a8:	2321      	movs	r3, #33	; 0x21
 80037aa:	6003      	str	r3, [r0, #0]
 80037ac:	e7e2      	b.n	8003774 <fmod+0x74>
 80037ae:	bf00      	nop
 80037b0:	200001ec 	.word	0x200001ec
 80037b4:	08004c18 	.word	0x08004c18

080037b8 <pow>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b08f      	sub	sp, #60	; 0x3c
 80037be:	461d      	mov	r5, r3
 80037c0:	4680      	mov	r8, r0
 80037c2:	4689      	mov	r9, r1
 80037c4:	4614      	mov	r4, r2
 80037c6:	f000 fa5f 	bl	8003c88 <__ieee754_pow>
 80037ca:	4fa1      	ldr	r7, [pc, #644]	; (8003a50 <pow+0x298>)
 80037cc:	e9cd 0100 	strd	r0, r1, [sp]
 80037d0:	f997 3000 	ldrsb.w	r3, [r7]
 80037d4:	463e      	mov	r6, r7
 80037d6:	9302      	str	r3, [sp, #8]
 80037d8:	3301      	adds	r3, #1
 80037da:	d05f      	beq.n	800389c <pow+0xe4>
 80037dc:	4622      	mov	r2, r4
 80037de:	462b      	mov	r3, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fd f922 	bl	8000a2c <__aeabi_dcmpun>
 80037e8:	4682      	mov	sl, r0
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d156      	bne.n	800389c <pow+0xe4>
 80037ee:	4642      	mov	r2, r8
 80037f0:	464b      	mov	r3, r9
 80037f2:	4640      	mov	r0, r8
 80037f4:	4649      	mov	r1, r9
 80037f6:	f7fd f919 	bl	8000a2c <__aeabi_dcmpun>
 80037fa:	9003      	str	r0, [sp, #12]
 80037fc:	b1e8      	cbz	r0, 800383a <pow+0x82>
 80037fe:	2200      	movs	r2, #0
 8003800:	2300      	movs	r3, #0
 8003802:	4620      	mov	r0, r4
 8003804:	4629      	mov	r1, r5
 8003806:	f7fd f8df 	bl	80009c8 <__aeabi_dcmpeq>
 800380a:	2800      	cmp	r0, #0
 800380c:	d046      	beq.n	800389c <pow+0xe4>
 800380e:	2301      	movs	r3, #1
 8003810:	2200      	movs	r2, #0
 8003812:	9304      	str	r3, [sp, #16]
 8003814:	4b8f      	ldr	r3, [pc, #572]	; (8003a54 <pow+0x29c>)
 8003816:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800381a:	9305      	str	r3, [sp, #20]
 800381c:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <pow+0x2a0>)
 800381e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003822:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003826:	9b02      	ldr	r3, [sp, #8]
 8003828:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d031      	beq.n	8003894 <pow+0xdc>
 8003830:	a804      	add	r0, sp, #16
 8003832:	f000 ffe9 	bl	8004808 <matherr>
 8003836:	bb38      	cbnz	r0, 8003888 <pow+0xd0>
 8003838:	e058      	b.n	80038ec <pow+0x134>
 800383a:	f04f 0a00 	mov.w	sl, #0
 800383e:	f04f 0b00 	mov.w	fp, #0
 8003842:	4652      	mov	r2, sl
 8003844:	465b      	mov	r3, fp
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f7fd f8bd 	bl	80009c8 <__aeabi_dcmpeq>
 800384e:	2800      	cmp	r0, #0
 8003850:	d051      	beq.n	80038f6 <pow+0x13e>
 8003852:	4652      	mov	r2, sl
 8003854:	465b      	mov	r3, fp
 8003856:	4620      	mov	r0, r4
 8003858:	4629      	mov	r1, r5
 800385a:	f7fd f8b5 	bl	80009c8 <__aeabi_dcmpeq>
 800385e:	4606      	mov	r6, r0
 8003860:	b308      	cbz	r0, 80038a6 <pow+0xee>
 8003862:	2301      	movs	r3, #1
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	4b7b      	ldr	r3, [pc, #492]	; (8003a54 <pow+0x29c>)
 8003868:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800386c:	9305      	str	r3, [sp, #20]
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003874:	930c      	str	r3, [sp, #48]	; 0x30
 8003876:	9b02      	ldr	r3, [sp, #8]
 8003878:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0d7      	beq.n	8003830 <pow+0x78>
 8003880:	2200      	movs	r2, #0
 8003882:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <pow+0x2a0>)
 8003884:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800388a:	b11b      	cbz	r3, 8003894 <pow+0xdc>
 800388c:	f7ff fdf0 	bl	8003470 <__errno>
 8003890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003892:	6003      	str	r3, [r0, #0]
 8003894:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003898:	e9cd 3400 	strd	r3, r4, [sp]
 800389c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038a0:	b00f      	add	sp, #60	; 0x3c
 80038a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f000 ffa7 	bl	80047fc <finite>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0f4      	beq.n	800389c <pow+0xe4>
 80038b2:	4652      	mov	r2, sl
 80038b4:	465b      	mov	r3, fp
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fd f88f 	bl	80009dc <__aeabi_dcmplt>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d0ec      	beq.n	800389c <pow+0xe4>
 80038c2:	2301      	movs	r3, #1
 80038c4:	9304      	str	r3, [sp, #16]
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <pow+0x29c>)
 80038c8:	960c      	str	r6, [sp, #48]	; 0x30
 80038ca:	9305      	str	r3, [sp, #20]
 80038cc:	f997 3000 	ldrsb.w	r3, [r7]
 80038d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80038d4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80038d8:	b913      	cbnz	r3, 80038e0 <pow+0x128>
 80038da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80038de:	e7a7      	b.n	8003830 <pow+0x78>
 80038e0:	2000      	movs	r0, #0
 80038e2:	495e      	ldr	r1, [pc, #376]	; (8003a5c <pow+0x2a4>)
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038ea:	d1a1      	bne.n	8003830 <pow+0x78>
 80038ec:	f7ff fdc0 	bl	8003470 <__errno>
 80038f0:	2321      	movs	r3, #33	; 0x21
 80038f2:	6003      	str	r3, [r0, #0]
 80038f4:	e7c8      	b.n	8003888 <pow+0xd0>
 80038f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038fa:	f000 ff7f 	bl	80047fc <finite>
 80038fe:	9002      	str	r0, [sp, #8]
 8003900:	2800      	cmp	r0, #0
 8003902:	d177      	bne.n	80039f4 <pow+0x23c>
 8003904:	4640      	mov	r0, r8
 8003906:	4649      	mov	r1, r9
 8003908:	f000 ff78 	bl	80047fc <finite>
 800390c:	2800      	cmp	r0, #0
 800390e:	d071      	beq.n	80039f4 <pow+0x23c>
 8003910:	4620      	mov	r0, r4
 8003912:	4629      	mov	r1, r5
 8003914:	f000 ff72 	bl	80047fc <finite>
 8003918:	2800      	cmp	r0, #0
 800391a:	d06b      	beq.n	80039f4 <pow+0x23c>
 800391c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7fd f882 	bl	8000a2c <__aeabi_dcmpun>
 8003928:	f997 7000 	ldrsb.w	r7, [r7]
 800392c:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <pow+0x29c>)
 800392e:	b1a0      	cbz	r0, 800395a <pow+0x1a2>
 8003930:	2201      	movs	r2, #1
 8003932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003936:	9b02      	ldr	r3, [sp, #8]
 8003938:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800393c:	930c      	str	r3, [sp, #48]	; 0x30
 800393e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003942:	2f00      	cmp	r7, #0
 8003944:	d0c9      	beq.n	80038da <pow+0x122>
 8003946:	4652      	mov	r2, sl
 8003948:	465b      	mov	r3, fp
 800394a:	4650      	mov	r0, sl
 800394c:	4659      	mov	r1, fp
 800394e:	f7fc fefd 	bl	800074c <__aeabi_ddiv>
 8003952:	2f02      	cmp	r7, #2
 8003954:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003958:	e7c7      	b.n	80038ea <pow+0x132>
 800395a:	2203      	movs	r2, #3
 800395c:	900c      	str	r0, [sp, #48]	; 0x30
 800395e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	2200      	movs	r2, #0
 8003968:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <pow+0x2a8>)
 800396a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800396e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003972:	f7fc fdc1 	bl	80004f8 <__aeabi_dmul>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	bb17      	cbnz	r7, 80039c2 <pow+0x20a>
 800397c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <pow+0x2ac>)
 8003982:	4640      	mov	r0, r8
 8003984:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003988:	4649      	mov	r1, r9
 800398a:	4652      	mov	r2, sl
 800398c:	465b      	mov	r3, fp
 800398e:	f7fd f825 	bl	80009dc <__aeabi_dcmplt>
 8003992:	2800      	cmp	r0, #0
 8003994:	d054      	beq.n	8003a40 <pow+0x288>
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f000 ff3d 	bl	8004818 <rint>
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	f7fd f811 	bl	80009c8 <__aeabi_dcmpeq>
 80039a6:	b920      	cbnz	r0, 80039b2 <pow+0x1fa>
 80039a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80039ac:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <pow+0x2b0>)
 80039ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039b2:	f996 3000 	ldrsb.w	r3, [r6]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d142      	bne.n	8003a40 <pow+0x288>
 80039ba:	f7ff fd59 	bl	8003470 <__errno>
 80039be:	2322      	movs	r3, #34	; 0x22
 80039c0:	e797      	b.n	80038f2 <pow+0x13a>
 80039c2:	2200      	movs	r2, #0
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <pow+0x2b4>)
 80039c6:	4640      	mov	r0, r8
 80039c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039cc:	4649      	mov	r1, r9
 80039ce:	4652      	mov	r2, sl
 80039d0:	465b      	mov	r3, fp
 80039d2:	f7fd f803 	bl	80009dc <__aeabi_dcmplt>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d0eb      	beq.n	80039b2 <pow+0x1fa>
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f000 ff1b 	bl	8004818 <rint>
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	f7fc ffef 	bl	80009c8 <__aeabi_dcmpeq>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d1e1      	bne.n	80039b2 <pow+0x1fa>
 80039ee:	2200      	movs	r2, #0
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <pow+0x2a4>)
 80039f2:	e7dc      	b.n	80039ae <pow+0x1f6>
 80039f4:	2200      	movs	r2, #0
 80039f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039fa:	2300      	movs	r3, #0
 80039fc:	f7fc ffe4 	bl	80009c8 <__aeabi_dcmpeq>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f43f af4b 	beq.w	800389c <pow+0xe4>
 8003a06:	4640      	mov	r0, r8
 8003a08:	4649      	mov	r1, r9
 8003a0a:	f000 fef7 	bl	80047fc <finite>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	f43f af44 	beq.w	800389c <pow+0xe4>
 8003a14:	4620      	mov	r0, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	f000 fef0 	bl	80047fc <finite>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f43f af3d 	beq.w	800389c <pow+0xe4>
 8003a22:	2304      	movs	r3, #4
 8003a24:	9304      	str	r3, [sp, #16]
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <pow+0x29c>)
 8003a28:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2400      	movs	r4, #0
 8003a32:	930c      	str	r3, [sp, #48]	; 0x30
 8003a34:	2300      	movs	r3, #0
 8003a36:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003a3a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003a3e:	e7b8      	b.n	80039b2 <pow+0x1fa>
 8003a40:	a804      	add	r0, sp, #16
 8003a42:	f000 fee1 	bl	8004808 <matherr>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	f47f af1e 	bne.w	8003888 <pow+0xd0>
 8003a4c:	e7b5      	b.n	80039ba <pow+0x202>
 8003a4e:	bf00      	nop
 8003a50:	200001ec 	.word	0x200001ec
 8003a54:	08004c1d 	.word	0x08004c1d
 8003a58:	3ff00000 	.word	0x3ff00000
 8003a5c:	fff00000 	.word	0xfff00000
 8003a60:	3fe00000 	.word	0x3fe00000
 8003a64:	47efffff 	.word	0x47efffff
 8003a68:	c7efffff 	.word	0xc7efffff
 8003a6c:	7ff00000 	.word	0x7ff00000

08003a70 <__ieee754_fmod>:
 8003a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003a78:	4682      	mov	sl, r0
 8003a7a:	ea54 0002 	orrs.w	r0, r4, r2
 8003a7e:	461e      	mov	r6, r3
 8003a80:	4694      	mov	ip, r2
 8003a82:	4696      	mov	lr, r2
 8003a84:	d00c      	beq.n	8003aa0 <__ieee754_fmod+0x30>
 8003a86:	4d78      	ldr	r5, [pc, #480]	; (8003c68 <__ieee754_fmod+0x1f8>)
 8003a88:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8003a8c:	45a8      	cmp	r8, r5
 8003a8e:	4689      	mov	r9, r1
 8003a90:	dc06      	bgt.n	8003aa0 <__ieee754_fmod+0x30>
 8003a92:	4255      	negs	r5, r2
 8003a94:	4315      	orrs	r5, r2
 8003a96:	4f75      	ldr	r7, [pc, #468]	; (8003c6c <__ieee754_fmod+0x1fc>)
 8003a98:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8003a9c:	42bd      	cmp	r5, r7
 8003a9e:	d908      	bls.n	8003ab2 <__ieee754_fmod+0x42>
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7fc fd29 	bl	80004f8 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	f7fc fe4f 	bl	800074c <__aeabi_ddiv>
 8003aae:	4682      	mov	sl, r0
 8003ab0:	e00f      	b.n	8003ad2 <__ieee754_fmod+0x62>
 8003ab2:	45a0      	cmp	r8, r4
 8003ab4:	4652      	mov	r2, sl
 8003ab6:	4657      	mov	r7, sl
 8003ab8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003abc:	dc0c      	bgt.n	8003ad8 <__ieee754_fmod+0x68>
 8003abe:	db08      	blt.n	8003ad2 <__ieee754_fmod+0x62>
 8003ac0:	45e2      	cmp	sl, ip
 8003ac2:	d306      	bcc.n	8003ad2 <__ieee754_fmod+0x62>
 8003ac4:	d108      	bne.n	8003ad8 <__ieee754_fmod+0x68>
 8003ac6:	496a      	ldr	r1, [pc, #424]	; (8003c70 <__ieee754_fmod+0x200>)
 8003ac8:	0fed      	lsrs	r5, r5, #31
 8003aca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8003ace:	e9d5 a100 	ldrd	sl, r1, [r5]
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <__ieee754_fmod+0x204>)
 8003ada:	4598      	cmp	r8, r3
 8003adc:	dc48      	bgt.n	8003b70 <__ieee754_fmod+0x100>
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	d13c      	bne.n	8003b5e <__ieee754_fmod+0xee>
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4864      	ldr	r0, [pc, #400]	; (8003c78 <__ieee754_fmod+0x208>)
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	dc35      	bgt.n	8003b58 <__ieee754_fmod+0xe8>
 8003aec:	429c      	cmp	r4, r3
 8003aee:	dc4f      	bgt.n	8003b90 <__ieee754_fmod+0x120>
 8003af0:	2c00      	cmp	r4, #0
 8003af2:	d145      	bne.n	8003b80 <__ieee754_fmod+0x110>
 8003af4:	4661      	mov	r1, ip
 8003af6:	4b60      	ldr	r3, [pc, #384]	; (8003c78 <__ieee754_fmod+0x208>)
 8003af8:	2900      	cmp	r1, #0
 8003afa:	dc3e      	bgt.n	8003b7a <__ieee754_fmod+0x10a>
 8003afc:	495f      	ldr	r1, [pc, #380]	; (8003c7c <__ieee754_fmod+0x20c>)
 8003afe:	4288      	cmp	r0, r1
 8003b00:	db4a      	blt.n	8003b98 <__ieee754_fmod+0x128>
 8003b02:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8003b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003b0a:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <__ieee754_fmod+0x20c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	db57      	blt.n	8003bc0 <__ieee754_fmod+0x150>
 8003b10:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8003b14:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8003b18:	1ac0      	subs	r0, r0, r3
 8003b1a:	1b8a      	subs	r2, r1, r6
 8003b1c:	eba7 040e 	sub.w	r4, r7, lr
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d163      	bne.n	8003bec <__ieee754_fmod+0x17c>
 8003b24:	4577      	cmp	r7, lr
 8003b26:	bf38      	it	cc
 8003b28:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003b2c:	2a00      	cmp	r2, #0
 8003b2e:	bfbc      	itt	lt
 8003b30:	463c      	movlt	r4, r7
 8003b32:	460a      	movlt	r2, r1
 8003b34:	ea52 0104 	orrs.w	r1, r2, r4
 8003b38:	d0c5      	beq.n	8003ac6 <__ieee754_fmod+0x56>
 8003b3a:	494e      	ldr	r1, [pc, #312]	; (8003c74 <__ieee754_fmod+0x204>)
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	dd6a      	ble.n	8003c16 <__ieee754_fmod+0x1a6>
 8003b40:	494e      	ldr	r1, [pc, #312]	; (8003c7c <__ieee754_fmod+0x20c>)
 8003b42:	428b      	cmp	r3, r1
 8003b44:	db6d      	blt.n	8003c22 <__ieee754_fmod+0x1b2>
 8003b46:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8003b4a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003b4e:	4315      	orrs	r5, r2
 8003b50:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8003b54:	4620      	mov	r0, r4
 8003b56:	e7aa      	b.n	8003aae <__ieee754_fmod+0x3e>
 8003b58:	3801      	subs	r0, #1
 8003b5a:	0049      	lsls	r1, r1, #1
 8003b5c:	e7c4      	b.n	8003ae8 <__ieee754_fmod+0x78>
 8003b5e:	4847      	ldr	r0, [pc, #284]	; (8003c7c <__ieee754_fmod+0x20c>)
 8003b60:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8003b64:	0049      	lsls	r1, r1, #1
 8003b66:	2900      	cmp	r1, #0
 8003b68:	f100 30ff 	add.w	r0, r0, #4294967295
 8003b6c:	dcfa      	bgt.n	8003b64 <__ieee754_fmod+0xf4>
 8003b6e:	e7bd      	b.n	8003aec <__ieee754_fmod+0x7c>
 8003b70:	ea4f 5028 	mov.w	r0, r8, asr #20
 8003b74:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003b78:	e7b8      	b.n	8003aec <__ieee754_fmod+0x7c>
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	0049      	lsls	r1, r1, #1
 8003b7e:	e7bb      	b.n	8003af8 <__ieee754_fmod+0x88>
 8003b80:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <__ieee754_fmod+0x20c>)
 8003b82:	02e1      	lsls	r1, r4, #11
 8003b84:	0049      	lsls	r1, r1, #1
 8003b86:	2900      	cmp	r1, #0
 8003b88:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b8c:	dcfa      	bgt.n	8003b84 <__ieee754_fmod+0x114>
 8003b8e:	e7b5      	b.n	8003afc <__ieee754_fmod+0x8c>
 8003b90:	1523      	asrs	r3, r4, #20
 8003b92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003b96:	e7b1      	b.n	8003afc <__ieee754_fmod+0x8c>
 8003b98:	1a0f      	subs	r7, r1, r0
 8003b9a:	2f1f      	cmp	r7, #31
 8003b9c:	dc0a      	bgt.n	8003bb4 <__ieee754_fmod+0x144>
 8003b9e:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8003ba2:	fa08 f807 	lsl.w	r8, r8, r7
 8003ba6:	fa22 f101 	lsr.w	r1, r2, r1
 8003baa:	ea41 0108 	orr.w	r1, r1, r8
 8003bae:	fa02 f707 	lsl.w	r7, r2, r7
 8003bb2:	e7aa      	b.n	8003b0a <__ieee754_fmod+0x9a>
 8003bb4:	4932      	ldr	r1, [pc, #200]	; (8003c80 <__ieee754_fmod+0x210>)
 8003bb6:	2700      	movs	r7, #0
 8003bb8:	1a09      	subs	r1, r1, r0
 8003bba:	fa02 f101 	lsl.w	r1, r2, r1
 8003bbe:	e7a4      	b.n	8003b0a <__ieee754_fmod+0x9a>
 8003bc0:	eba2 0e03 	sub.w	lr, r2, r3
 8003bc4:	f1be 0f1f 	cmp.w	lr, #31
 8003bc8:	dc09      	bgt.n	8003bde <__ieee754_fmod+0x16e>
 8003bca:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8003bce:	fa04 f40e 	lsl.w	r4, r4, lr
 8003bd2:	fa2c f606 	lsr.w	r6, ip, r6
 8003bd6:	4326      	orrs	r6, r4
 8003bd8:	fa0c fe0e 	lsl.w	lr, ip, lr
 8003bdc:	e79c      	b.n	8003b18 <__ieee754_fmod+0xa8>
 8003bde:	4e28      	ldr	r6, [pc, #160]	; (8003c80 <__ieee754_fmod+0x210>)
 8003be0:	f04f 0e00 	mov.w	lr, #0
 8003be4:	1af6      	subs	r6, r6, r3
 8003be6:	fa0c f606 	lsl.w	r6, ip, r6
 8003bea:	e795      	b.n	8003b18 <__ieee754_fmod+0xa8>
 8003bec:	4577      	cmp	r7, lr
 8003bee:	bf38      	it	cc
 8003bf0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	da05      	bge.n	8003c04 <__ieee754_fmod+0x194>
 8003bf8:	0ffa      	lsrs	r2, r7, #31
 8003bfa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003bfe:	007f      	lsls	r7, r7, #1
 8003c00:	3801      	subs	r0, #1
 8003c02:	e78a      	b.n	8003b1a <__ieee754_fmod+0xaa>
 8003c04:	ea52 0104 	orrs.w	r1, r2, r4
 8003c08:	f43f af5d 	beq.w	8003ac6 <__ieee754_fmod+0x56>
 8003c0c:	0fe1      	lsrs	r1, r4, #31
 8003c0e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003c12:	0067      	lsls	r7, r4, #1
 8003c14:	e7f4      	b.n	8003c00 <__ieee754_fmod+0x190>
 8003c16:	0fe0      	lsrs	r0, r4, #31
 8003c18:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003c1c:	0064      	lsls	r4, r4, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	e78c      	b.n	8003b3c <__ieee754_fmod+0xcc>
 8003c22:	1ac9      	subs	r1, r1, r3
 8003c24:	2914      	cmp	r1, #20
 8003c26:	dc0a      	bgt.n	8003c3e <__ieee754_fmod+0x1ce>
 8003c28:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	40cc      	lsrs	r4, r1
 8003c32:	4323      	orrs	r3, r4
 8003c34:	410a      	asrs	r2, r1
 8003c36:	ea42 0105 	orr.w	r1, r2, r5
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	e737      	b.n	8003aae <__ieee754_fmod+0x3e>
 8003c3e:	291f      	cmp	r1, #31
 8003c40:	dc07      	bgt.n	8003c52 <__ieee754_fmod+0x1e2>
 8003c42:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003c46:	40cc      	lsrs	r4, r1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	4323      	orrs	r3, r4
 8003c4e:	462a      	mov	r2, r5
 8003c50:	e7f1      	b.n	8003c36 <__ieee754_fmod+0x1c6>
 8003c52:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8003c56:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8003c5a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8003c5e:	33e2      	adds	r3, #226	; 0xe2
 8003c60:	fa42 f303 	asr.w	r3, r2, r3
 8003c64:	e7f3      	b.n	8003c4e <__ieee754_fmod+0x1de>
 8003c66:	bf00      	nop
 8003c68:	7fefffff 	.word	0x7fefffff
 8003c6c:	7ff00000 	.word	0x7ff00000
 8003c70:	08004c28 	.word	0x08004c28
 8003c74:	000fffff 	.word	0x000fffff
 8003c78:	fffffbed 	.word	0xfffffbed
 8003c7c:	fffffc02 	.word	0xfffffc02
 8003c80:	fffffbe2 	.word	0xfffffbe2
 8003c84:	00000000 	.word	0x00000000

08003c88 <__ieee754_pow>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	b091      	sub	sp, #68	; 0x44
 8003c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c92:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003c96:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003c9a:	ea55 0302 	orrs.w	r3, r5, r2
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	4688      	mov	r8, r1
 8003ca2:	f000 84b7 	beq.w	8004614 <__ieee754_pow+0x98c>
 8003ca6:	4b80      	ldr	r3, [pc, #512]	; (8003ea8 <__ieee754_pow+0x220>)
 8003ca8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003cac:	429c      	cmp	r4, r3
 8003cae:	4689      	mov	r9, r1
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	dc09      	bgt.n	8003cc8 <__ieee754_pow+0x40>
 8003cb4:	d103      	bne.n	8003cbe <__ieee754_pow+0x36>
 8003cb6:	b938      	cbnz	r0, 8003cc8 <__ieee754_pow+0x40>
 8003cb8:	42a5      	cmp	r5, r4
 8003cba:	dc0d      	bgt.n	8003cd8 <__ieee754_pow+0x50>
 8003cbc:	e001      	b.n	8003cc2 <__ieee754_pow+0x3a>
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	dc02      	bgt.n	8003cc8 <__ieee754_pow+0x40>
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	d10e      	bne.n	8003ce4 <__ieee754_pow+0x5c>
 8003cc6:	b16a      	cbz	r2, 8003ce4 <__ieee754_pow+0x5c>
 8003cc8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ccc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003cd0:	ea54 030a 	orrs.w	r3, r4, sl
 8003cd4:	f000 849e 	beq.w	8004614 <__ieee754_pow+0x98c>
 8003cd8:	4874      	ldr	r0, [pc, #464]	; (8003eac <__ieee754_pow+0x224>)
 8003cda:	b011      	add	sp, #68	; 0x44
 8003cdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	f000 bd94 	b.w	800480c <nan>
 8003ce4:	f1b9 0f00 	cmp.w	r9, #0
 8003ce8:	da53      	bge.n	8003d92 <__ieee754_pow+0x10a>
 8003cea:	4b71      	ldr	r3, [pc, #452]	; (8003eb0 <__ieee754_pow+0x228>)
 8003cec:	429d      	cmp	r5, r3
 8003cee:	dc4e      	bgt.n	8003d8e <__ieee754_pow+0x106>
 8003cf0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003cf4:	429d      	cmp	r5, r3
 8003cf6:	dd4c      	ble.n	8003d92 <__ieee754_pow+0x10a>
 8003cf8:	152b      	asrs	r3, r5, #20
 8003cfa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003cfe:	2b14      	cmp	r3, #20
 8003d00:	dd28      	ble.n	8003d54 <__ieee754_pow+0xcc>
 8003d02:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003d06:	fa22 f103 	lsr.w	r1, r2, r3
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d13f      	bne.n	8003d92 <__ieee754_pow+0x10a>
 8003d12:	f001 0101 	and.w	r1, r1, #1
 8003d16:	f1c1 0302 	rsb	r3, r1, #2
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d15c      	bne.n	8003dda <__ieee754_pow+0x152>
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <__ieee754_pow+0x220>)
 8003d22:	429d      	cmp	r5, r3
 8003d24:	d126      	bne.n	8003d74 <__ieee754_pow+0xec>
 8003d26:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d2a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d2e:	ea53 030a 	orrs.w	r3, r3, sl
 8003d32:	f000 846f 	beq.w	8004614 <__ieee754_pow+0x98c>
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <__ieee754_pow+0x22c>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	dd2c      	ble.n	8003d96 <__ieee754_pow+0x10e>
 8003d3c:	2e00      	cmp	r6, #0
 8003d3e:	f280 846f 	bge.w	8004620 <__ieee754_pow+0x998>
 8003d42:	f04f 0b00 	mov.w	fp, #0
 8003d46:	f04f 0c00 	mov.w	ip, #0
 8003d4a:	4658      	mov	r0, fp
 8003d4c:	4661      	mov	r1, ip
 8003d4e:	b011      	add	sp, #68	; 0x44
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d13e      	bne.n	8003dd6 <__ieee754_pow+0x14e>
 8003d58:	f1c3 0314 	rsb	r3, r3, #20
 8003d5c:	fa45 f103 	asr.w	r1, r5, r3
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	42ab      	cmp	r3, r5
 8003d66:	f040 8463 	bne.w	8004630 <__ieee754_pow+0x9a8>
 8003d6a:	f001 0101 	and.w	r1, r1, #1
 8003d6e:	f1c1 0302 	rsb	r3, r1, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <__ieee754_pow+0x230>)
 8003d76:	429d      	cmp	r5, r3
 8003d78:	d114      	bne.n	8003da4 <__ieee754_pow+0x11c>
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	f280 8454 	bge.w	8004628 <__ieee754_pow+0x9a0>
 8003d80:	463a      	mov	r2, r7
 8003d82:	4643      	mov	r3, r8
 8003d84:	2000      	movs	r0, #0
 8003d86:	494c      	ldr	r1, [pc, #304]	; (8003eb8 <__ieee754_pow+0x230>)
 8003d88:	f7fc fce0 	bl	800074c <__aeabi_ddiv>
 8003d8c:	e013      	b.n	8003db6 <__ieee754_pow+0x12e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e7c3      	b.n	8003d1a <__ieee754_pow+0x92>
 8003d92:	2300      	movs	r3, #0
 8003d94:	e7c1      	b.n	8003d1a <__ieee754_pow+0x92>
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	dad3      	bge.n	8003d42 <__ieee754_pow+0xba>
 8003d9a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003d9e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003da2:	e7d2      	b.n	8003d4a <__ieee754_pow+0xc2>
 8003da4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003da8:	d108      	bne.n	8003dbc <__ieee754_pow+0x134>
 8003daa:	463a      	mov	r2, r7
 8003dac:	4643      	mov	r3, r8
 8003dae:	4638      	mov	r0, r7
 8003db0:	4641      	mov	r1, r8
 8003db2:	f7fc fba1 	bl	80004f8 <__aeabi_dmul>
 8003db6:	4683      	mov	fp, r0
 8003db8:	468c      	mov	ip, r1
 8003dba:	e7c6      	b.n	8003d4a <__ieee754_pow+0xc2>
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <__ieee754_pow+0x234>)
 8003dbe:	429e      	cmp	r6, r3
 8003dc0:	d10b      	bne.n	8003dda <__ieee754_pow+0x152>
 8003dc2:	f1b9 0f00 	cmp.w	r9, #0
 8003dc6:	db08      	blt.n	8003dda <__ieee754_pow+0x152>
 8003dc8:	4638      	mov	r0, r7
 8003dca:	4641      	mov	r1, r8
 8003dcc:	b011      	add	sp, #68	; 0x44
 8003dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd2:	f000 bc63 	b.w	800469c <__ieee754_sqrt>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4638      	mov	r0, r7
 8003ddc:	4641      	mov	r1, r8
 8003dde:	f000 fd09 	bl	80047f4 <fabs>
 8003de2:	4683      	mov	fp, r0
 8003de4:	468c      	mov	ip, r1
 8003de6:	f1ba 0f00 	cmp.w	sl, #0
 8003dea:	d12b      	bne.n	8003e44 <__ieee754_pow+0x1bc>
 8003dec:	b124      	cbz	r4, 8003df8 <__ieee754_pow+0x170>
 8003dee:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <__ieee754_pow+0x230>)
 8003df0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d125      	bne.n	8003e44 <__ieee754_pow+0x1bc>
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	da07      	bge.n	8003e0c <__ieee754_pow+0x184>
 8003dfc:	465a      	mov	r2, fp
 8003dfe:	4663      	mov	r3, ip
 8003e00:	2000      	movs	r0, #0
 8003e02:	492d      	ldr	r1, [pc, #180]	; (8003eb8 <__ieee754_pow+0x230>)
 8003e04:	f7fc fca2 	bl	800074c <__aeabi_ddiv>
 8003e08:	4683      	mov	fp, r0
 8003e0a:	468c      	mov	ip, r1
 8003e0c:	f1b9 0f00 	cmp.w	r9, #0
 8003e10:	da9b      	bge.n	8003d4a <__ieee754_pow+0xc2>
 8003e12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003e16:	9b00      	ldr	r3, [sp, #0]
 8003e18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003e1c:	4323      	orrs	r3, r4
 8003e1e:	d108      	bne.n	8003e32 <__ieee754_pow+0x1aa>
 8003e20:	465a      	mov	r2, fp
 8003e22:	4663      	mov	r3, ip
 8003e24:	4658      	mov	r0, fp
 8003e26:	4661      	mov	r1, ip
 8003e28:	f7fc f9ae 	bl	8000188 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	e7aa      	b.n	8003d88 <__ieee754_pow+0x100>
 8003e32:	9b00      	ldr	r3, [sp, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d188      	bne.n	8003d4a <__ieee754_pow+0xc2>
 8003e38:	4658      	mov	r0, fp
 8003e3a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003e3e:	4683      	mov	fp, r0
 8003e40:	469c      	mov	ip, r3
 8003e42:	e782      	b.n	8003d4a <__ieee754_pow+0xc2>
 8003e44:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003e48:	f109 33ff 	add.w	r3, r9, #4294967295
 8003e4c:	930d      	str	r3, [sp, #52]	; 0x34
 8003e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e50:	9b00      	ldr	r3, [sp, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d104      	bne.n	8003e60 <__ieee754_pow+0x1d8>
 8003e56:	463a      	mov	r2, r7
 8003e58:	4643      	mov	r3, r8
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	e7e3      	b.n	8003e28 <__ieee754_pow+0x1a0>
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <__ieee754_pow+0x238>)
 8003e62:	429d      	cmp	r5, r3
 8003e64:	f340 80fe 	ble.w	8004064 <__ieee754_pow+0x3dc>
 8003e68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003e6c:	429d      	cmp	r5, r3
 8003e6e:	dd0b      	ble.n	8003e88 <__ieee754_pow+0x200>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <__ieee754_pow+0x22c>)
 8003e72:	429c      	cmp	r4, r3
 8003e74:	dc0e      	bgt.n	8003e94 <__ieee754_pow+0x20c>
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	f6bf af63 	bge.w	8003d42 <__ieee754_pow+0xba>
 8003e7c:	a308      	add	r3, pc, #32	; (adr r3, 8003ea0 <__ieee754_pow+0x218>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	e794      	b.n	8003db2 <__ieee754_pow+0x12a>
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <__ieee754_pow+0x23c>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	ddf3      	ble.n	8003e76 <__ieee754_pow+0x1ee>
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <__ieee754_pow+0x230>)
 8003e90:	429c      	cmp	r4, r3
 8003e92:	dd19      	ble.n	8003ec8 <__ieee754_pow+0x240>
 8003e94:	2e00      	cmp	r6, #0
 8003e96:	dcf1      	bgt.n	8003e7c <__ieee754_pow+0x1f4>
 8003e98:	e753      	b.n	8003d42 <__ieee754_pow+0xba>
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	8800759c 	.word	0x8800759c
 8003ea4:	7e37e43c 	.word	0x7e37e43c
 8003ea8:	7ff00000 	.word	0x7ff00000
 8003eac:	08004b16 	.word	0x08004b16
 8003eb0:	433fffff 	.word	0x433fffff
 8003eb4:	3fefffff 	.word	0x3fefffff
 8003eb8:	3ff00000 	.word	0x3ff00000
 8003ebc:	3fe00000 	.word	0x3fe00000
 8003ec0:	41e00000 	.word	0x41e00000
 8003ec4:	3feffffe 	.word	0x3feffffe
 8003ec8:	4661      	mov	r1, ip
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b60      	ldr	r3, [pc, #384]	; (8004050 <__ieee754_pow+0x3c8>)
 8003ece:	4658      	mov	r0, fp
 8003ed0:	f7fc f95a 	bl	8000188 <__aeabi_dsub>
 8003ed4:	a354      	add	r3, pc, #336	; (adr r3, 8004028 <__ieee754_pow+0x3a0>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	4604      	mov	r4, r0
 8003edc:	460d      	mov	r5, r1
 8003ede:	f7fc fb0b 	bl	80004f8 <__aeabi_dmul>
 8003ee2:	a353      	add	r3, pc, #332	; (adr r3, 8004030 <__ieee754_pow+0x3a8>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	4606      	mov	r6, r0
 8003eea:	460f      	mov	r7, r1
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc fb02 	bl	80004f8 <__aeabi_dmul>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4682      	mov	sl, r0
 8003ef8:	468b      	mov	fp, r1
 8003efa:	4b56      	ldr	r3, [pc, #344]	; (8004054 <__ieee754_pow+0x3cc>)
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc fafa 	bl	80004f8 <__aeabi_dmul>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	a14b      	add	r1, pc, #300	; (adr r1, 8004038 <__ieee754_pow+0x3b0>)
 8003f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f0e:	f7fc f93b 	bl	8000188 <__aeabi_dsub>
 8003f12:	4622      	mov	r2, r4
 8003f14:	462b      	mov	r3, r5
 8003f16:	f7fc faef 	bl	80004f8 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	2000      	movs	r0, #0
 8003f20:	494d      	ldr	r1, [pc, #308]	; (8004058 <__ieee754_pow+0x3d0>)
 8003f22:	f7fc f931 	bl	8000188 <__aeabi_dsub>
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	4620      	mov	r0, r4
 8003f30:	4629      	mov	r1, r5
 8003f32:	f7fc fae1 	bl	80004f8 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	f7fc fadb 	bl	80004f8 <__aeabi_dmul>
 8003f42:	a33f      	add	r3, pc, #252	; (adr r3, 8004040 <__ieee754_pow+0x3b8>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f7fc fad6 	bl	80004f8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4650      	mov	r0, sl
 8003f52:	4659      	mov	r1, fp
 8003f54:	f7fc f918 	bl	8000188 <__aeabi_dsub>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	460d      	mov	r5, r1
 8003f60:	4630      	mov	r0, r6
 8003f62:	4639      	mov	r1, r7
 8003f64:	f7fc f912 	bl	800018c <__adddf3>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	468b      	mov	fp, r1
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	4632      	mov	r2, r6
 8003f70:	463b      	mov	r3, r7
 8003f72:	f7fc f909 	bl	8000188 <__aeabi_dsub>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7fc f903 	bl	8000188 <__aeabi_dsub>
 8003f82:	9b00      	ldr	r3, [sp, #0]
 8003f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	4c32      	ldreq	r4, [pc, #200]	; (800405c <__ieee754_pow+0x3d4>)
 8003f92:	4c2f      	ldrne	r4, [pc, #188]	; (8004050 <__ieee754_pow+0x3c8>)
 8003f94:	4606      	mov	r6, r0
 8003f96:	e9cd 3400 	strd	r3, r4, [sp]
 8003f9a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f9e:	2400      	movs	r4, #0
 8003fa0:	460f      	mov	r7, r1
 8003fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f7fc f8ed 	bl	8000188 <__aeabi_dsub>
 8003fae:	4652      	mov	r2, sl
 8003fb0:	465b      	mov	r3, fp
 8003fb2:	f7fc faa1 	bl	80004f8 <__aeabi_dmul>
 8003fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fba:	4680      	mov	r8, r0
 8003fbc:	4689      	mov	r9, r1
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc fa99 	bl	80004f8 <__aeabi_dmul>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc f8dd 	bl	800018c <__adddf3>
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	4680      	mov	r8, r0
 8003fd8:	4689      	mov	r9, r1
 8003fda:	4650      	mov	r0, sl
 8003fdc:	4659      	mov	r1, fp
 8003fde:	f7fc fa8b 	bl	80004f8 <__aeabi_dmul>
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ff2:	f7fc f8cb 	bl	800018c <__adddf3>
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <__ieee754_pow+0x3d8>)
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	460f      	mov	r7, r1
 8003ffe:	460e      	mov	r6, r1
 8004000:	f340 82e1 	ble.w	80045c6 <__ieee754_pow+0x93e>
 8004004:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004008:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800400c:	4303      	orrs	r3, r0
 800400e:	f000 81db 	beq.w	80043c8 <__ieee754_pow+0x740>
 8004012:	a30d      	add	r3, pc, #52	; (adr r3, 8004048 <__ieee754_pow+0x3c0>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800401c:	f7fc fa6c 	bl	80004f8 <__aeabi_dmul>
 8004020:	a309      	add	r3, pc, #36	; (adr r3, 8004048 <__ieee754_pow+0x3c0>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	e6c4      	b.n	8003db2 <__ieee754_pow+0x12a>
 8004028:	60000000 	.word	0x60000000
 800402c:	3ff71547 	.word	0x3ff71547
 8004030:	f85ddf44 	.word	0xf85ddf44
 8004034:	3e54ae0b 	.word	0x3e54ae0b
 8004038:	55555555 	.word	0x55555555
 800403c:	3fd55555 	.word	0x3fd55555
 8004040:	652b82fe 	.word	0x652b82fe
 8004044:	3ff71547 	.word	0x3ff71547
 8004048:	8800759c 	.word	0x8800759c
 800404c:	7e37e43c 	.word	0x7e37e43c
 8004050:	3ff00000 	.word	0x3ff00000
 8004054:	3fd00000 	.word	0x3fd00000
 8004058:	3fe00000 	.word	0x3fe00000
 800405c:	bff00000 	.word	0xbff00000
 8004060:	408fffff 	.word	0x408fffff
 8004064:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	da08      	bge.n	8004080 <__ieee754_pow+0x3f8>
 800406e:	4658      	mov	r0, fp
 8004070:	4bcd      	ldr	r3, [pc, #820]	; (80043a8 <__ieee754_pow+0x720>)
 8004072:	4661      	mov	r1, ip
 8004074:	f7fc fa40 	bl	80004f8 <__aeabi_dmul>
 8004078:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800407c:	4683      	mov	fp, r0
 800407e:	460c      	mov	r4, r1
 8004080:	1523      	asrs	r3, r4, #20
 8004082:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004086:	4413      	add	r3, r2
 8004088:	930c      	str	r3, [sp, #48]	; 0x30
 800408a:	4bc8      	ldr	r3, [pc, #800]	; (80043ac <__ieee754_pow+0x724>)
 800408c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004090:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004094:	429c      	cmp	r4, r3
 8004096:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800409a:	dd08      	ble.n	80040ae <__ieee754_pow+0x426>
 800409c:	4bc4      	ldr	r3, [pc, #784]	; (80043b0 <__ieee754_pow+0x728>)
 800409e:	429c      	cmp	r4, r3
 80040a0:	f340 815b 	ble.w	800435a <__ieee754_pow+0x6d2>
 80040a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80040aa:	3301      	adds	r3, #1
 80040ac:	930c      	str	r3, [sp, #48]	; 0x30
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	4658      	mov	r0, fp
 80040b4:	4629      	mov	r1, r5
 80040b6:	4bbf      	ldr	r3, [pc, #764]	; (80043b4 <__ieee754_pow+0x72c>)
 80040b8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80040bc:	444b      	add	r3, r9
 80040be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4623      	mov	r3, r4
 80040ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040ce:	f7fc f85b 	bl	8000188 <__aeabi_dsub>
 80040d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040d6:	4606      	mov	r6, r0
 80040d8:	460f      	mov	r7, r1
 80040da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80040de:	f7fc f855 	bl	800018c <__adddf3>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	2000      	movs	r0, #0
 80040e8:	49b3      	ldr	r1, [pc, #716]	; (80043b8 <__ieee754_pow+0x730>)
 80040ea:	f7fc fb2f 	bl	800074c <__aeabi_ddiv>
 80040ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc f9fd 	bl	80004f8 <__aeabi_dmul>
 80040fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004102:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004106:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800410a:	2300      	movs	r3, #0
 800410c:	2200      	movs	r2, #0
 800410e:	106d      	asrs	r5, r5, #1
 8004110:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800411a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800411e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8004122:	4650      	mov	r0, sl
 8004124:	4659      	mov	r1, fp
 8004126:	4614      	mov	r4, r2
 8004128:	461d      	mov	r5, r3
 800412a:	f7fc f9e5 	bl	80004f8 <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4630      	mov	r0, r6
 8004134:	4639      	mov	r1, r7
 8004136:	f7fc f827 	bl	8000188 <__aeabi_dsub>
 800413a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800413e:	4606      	mov	r6, r0
 8004140:	460f      	mov	r7, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f7fc f81f 	bl	8000188 <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004152:	f7fc f819 	bl	8000188 <__aeabi_dsub>
 8004156:	4652      	mov	r2, sl
 8004158:	465b      	mov	r3, fp
 800415a:	f7fc f9cd 	bl	80004f8 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f7fc f80f 	bl	8000188 <__aeabi_dsub>
 800416a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800416e:	f7fc f9c3 	bl	80004f8 <__aeabi_dmul>
 8004172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	f7fc f9bb 	bl	80004f8 <__aeabi_dmul>
 8004182:	a377      	add	r3, pc, #476	; (adr r3, 8004360 <__ieee754_pow+0x6d8>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	f7fc f9b4 	bl	80004f8 <__aeabi_dmul>
 8004190:	a375      	add	r3, pc, #468	; (adr r3, 8004368 <__ieee754_pow+0x6e0>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fb fff9 	bl	800018c <__adddf3>
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	f7fc f9ab 	bl	80004f8 <__aeabi_dmul>
 80041a2:	a373      	add	r3, pc, #460	; (adr r3, 8004370 <__ieee754_pow+0x6e8>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fb fff0 	bl	800018c <__adddf3>
 80041ac:	4622      	mov	r2, r4
 80041ae:	462b      	mov	r3, r5
 80041b0:	f7fc f9a2 	bl	80004f8 <__aeabi_dmul>
 80041b4:	a370      	add	r3, pc, #448	; (adr r3, 8004378 <__ieee754_pow+0x6f0>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fb ffe7 	bl	800018c <__adddf3>
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	f7fc f999 	bl	80004f8 <__aeabi_dmul>
 80041c6:	a36e      	add	r3, pc, #440	; (adr r3, 8004380 <__ieee754_pow+0x6f8>)
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f7fb ffde 	bl	800018c <__adddf3>
 80041d0:	4622      	mov	r2, r4
 80041d2:	462b      	mov	r3, r5
 80041d4:	f7fc f990 	bl	80004f8 <__aeabi_dmul>
 80041d8:	a36b      	add	r3, pc, #428	; (adr r3, 8004388 <__ieee754_pow+0x700>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fb ffd5 	bl	800018c <__adddf3>
 80041e2:	4622      	mov	r2, r4
 80041e4:	4606      	mov	r6, r0
 80041e6:	460f      	mov	r7, r1
 80041e8:	462b      	mov	r3, r5
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fc f983 	bl	80004f8 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4630      	mov	r0, r6
 80041f8:	4639      	mov	r1, r7
 80041fa:	f7fc f97d 	bl	80004f8 <__aeabi_dmul>
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004206:	4652      	mov	r2, sl
 8004208:	465b      	mov	r3, fp
 800420a:	f7fb ffbf 	bl	800018c <__adddf3>
 800420e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004212:	f7fc f971 	bl	80004f8 <__aeabi_dmul>
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	f7fb ffb7 	bl	800018c <__adddf3>
 800421e:	4652      	mov	r2, sl
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	465b      	mov	r3, fp
 8004226:	4650      	mov	r0, sl
 8004228:	4659      	mov	r1, fp
 800422a:	f7fc f965 	bl	80004f8 <__aeabi_dmul>
 800422e:	2200      	movs	r2, #0
 8004230:	4b62      	ldr	r3, [pc, #392]	; (80043bc <__ieee754_pow+0x734>)
 8004232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004236:	f7fb ffa9 	bl	800018c <__adddf3>
 800423a:	4632      	mov	r2, r6
 800423c:	463b      	mov	r3, r7
 800423e:	f7fb ffa5 	bl	800018c <__adddf3>
 8004242:	9804      	ldr	r0, [sp, #16]
 8004244:	460d      	mov	r5, r1
 8004246:	4604      	mov	r4, r0
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4650      	mov	r0, sl
 800424e:	4659      	mov	r1, fp
 8004250:	f7fc f952 	bl	80004f8 <__aeabi_dmul>
 8004254:	2200      	movs	r2, #0
 8004256:	4682      	mov	sl, r0
 8004258:	468b      	mov	fp, r1
 800425a:	4b58      	ldr	r3, [pc, #352]	; (80043bc <__ieee754_pow+0x734>)
 800425c:	4620      	mov	r0, r4
 800425e:	4629      	mov	r1, r5
 8004260:	f7fb ff92 	bl	8000188 <__aeabi_dsub>
 8004264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004268:	f7fb ff8e 	bl	8000188 <__aeabi_dsub>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4630      	mov	r0, r6
 8004272:	4639      	mov	r1, r7
 8004274:	f7fb ff88 	bl	8000188 <__aeabi_dsub>
 8004278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800427c:	f7fc f93c 	bl	80004f8 <__aeabi_dmul>
 8004280:	4622      	mov	r2, r4
 8004282:	4606      	mov	r6, r0
 8004284:	460f      	mov	r7, r1
 8004286:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800428a:	462b      	mov	r3, r5
 800428c:	f7fc f934 	bl	80004f8 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4630      	mov	r0, r6
 8004296:	4639      	mov	r1, r7
 8004298:	f7fb ff78 	bl	800018c <__adddf3>
 800429c:	4606      	mov	r6, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4650      	mov	r0, sl
 80042a6:	4659      	mov	r1, fp
 80042a8:	f7fb ff70 	bl	800018c <__adddf3>
 80042ac:	a338      	add	r3, pc, #224	; (adr r3, 8004390 <__ieee754_pow+0x708>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	9804      	ldr	r0, [sp, #16]
 80042b4:	460d      	mov	r5, r1
 80042b6:	4604      	mov	r4, r0
 80042b8:	f7fc f91e 	bl	80004f8 <__aeabi_dmul>
 80042bc:	4652      	mov	r2, sl
 80042be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042c2:	465b      	mov	r3, fp
 80042c4:	4620      	mov	r0, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7fb ff5e 	bl	8000188 <__aeabi_dsub>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fb ff58 	bl	8000188 <__aeabi_dsub>
 80042d8:	a32f      	add	r3, pc, #188	; (adr r3, 8004398 <__ieee754_pow+0x710>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fc f90b 	bl	80004f8 <__aeabi_dmul>
 80042e2:	a32f      	add	r3, pc, #188	; (adr r3, 80043a0 <__ieee754_pow+0x718>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	4606      	mov	r6, r0
 80042ea:	460f      	mov	r7, r1
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc f902 	bl	80004f8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fb ff46 	bl	800018c <__adddf3>
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <__ieee754_pow+0x738>)
 8004302:	444b      	add	r3, r9
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ff40 	bl	800018c <__adddf3>
 800430c:	4604      	mov	r4, r0
 800430e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004310:	460d      	mov	r5, r1
 8004312:	f7fc f887 	bl	8000424 <__aeabi_i2d>
 8004316:	4606      	mov	r6, r0
 8004318:	460f      	mov	r7, r1
 800431a:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <__ieee754_pow+0x73c>)
 800431c:	4622      	mov	r2, r4
 800431e:	444b      	add	r3, r9
 8004320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004324:	462b      	mov	r3, r5
 8004326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800432a:	f7fb ff2f 	bl	800018c <__adddf3>
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	f7fb ff2b 	bl	800018c <__adddf3>
 8004336:	4632      	mov	r2, r6
 8004338:	463b      	mov	r3, r7
 800433a:	f7fb ff27 	bl	800018c <__adddf3>
 800433e:	9804      	ldr	r0, [sp, #16]
 8004340:	4632      	mov	r2, r6
 8004342:	463b      	mov	r3, r7
 8004344:	4682      	mov	sl, r0
 8004346:	468b      	mov	fp, r1
 8004348:	f7fb ff1e 	bl	8000188 <__aeabi_dsub>
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	f7fb ff1a 	bl	8000188 <__aeabi_dsub>
 8004354:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004358:	e60b      	b.n	8003f72 <__ieee754_pow+0x2ea>
 800435a:	f04f 0801 	mov.w	r8, #1
 800435e:	e6a8      	b.n	80040b2 <__ieee754_pow+0x42a>
 8004360:	4a454eef 	.word	0x4a454eef
 8004364:	3fca7e28 	.word	0x3fca7e28
 8004368:	93c9db65 	.word	0x93c9db65
 800436c:	3fcd864a 	.word	0x3fcd864a
 8004370:	a91d4101 	.word	0xa91d4101
 8004374:	3fd17460 	.word	0x3fd17460
 8004378:	518f264d 	.word	0x518f264d
 800437c:	3fd55555 	.word	0x3fd55555
 8004380:	db6fabff 	.word	0xdb6fabff
 8004384:	3fdb6db6 	.word	0x3fdb6db6
 8004388:	33333303 	.word	0x33333303
 800438c:	3fe33333 	.word	0x3fe33333
 8004390:	e0000000 	.word	0xe0000000
 8004394:	3feec709 	.word	0x3feec709
 8004398:	dc3a03fd 	.word	0xdc3a03fd
 800439c:	3feec709 	.word	0x3feec709
 80043a0:	145b01f5 	.word	0x145b01f5
 80043a4:	be3e2fe0 	.word	0xbe3e2fe0
 80043a8:	43400000 	.word	0x43400000
 80043ac:	0003988e 	.word	0x0003988e
 80043b0:	000bb679 	.word	0x000bb679
 80043b4:	08004c38 	.word	0x08004c38
 80043b8:	3ff00000 	.word	0x3ff00000
 80043bc:	40080000 	.word	0x40080000
 80043c0:	08004c58 	.word	0x08004c58
 80043c4:	08004c48 	.word	0x08004c48
 80043c8:	a39b      	add	r3, pc, #620	; (adr r3, 8004638 <__ieee754_pow+0x9b0>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fb fedb 	bl	800018c <__adddf3>
 80043d6:	4622      	mov	r2, r4
 80043d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043dc:	462b      	mov	r3, r5
 80043de:	4650      	mov	r0, sl
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fb fed1 	bl	8000188 <__aeabi_dsub>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043ee:	f7fc fb13 	bl	8000a18 <__aeabi_dcmpgt>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f47f ae0d 	bne.w	8004012 <__ieee754_pow+0x38a>
 80043f8:	4aa3      	ldr	r2, [pc, #652]	; (8004688 <__ieee754_pow+0xa00>)
 80043fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80043fe:	4293      	cmp	r3, r2
 8004400:	f340 8103 	ble.w	800460a <__ieee754_pow+0x982>
 8004404:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004408:	2000      	movs	r0, #0
 800440a:	151b      	asrs	r3, r3, #20
 800440c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004410:	fa4a f303 	asr.w	r3, sl, r3
 8004414:	4433      	add	r3, r6
 8004416:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800441a:	4f9c      	ldr	r7, [pc, #624]	; (800468c <__ieee754_pow+0xa04>)
 800441c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004420:	4117      	asrs	r7, r2
 8004422:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004426:	ea23 0107 	bic.w	r1, r3, r7
 800442a:	f1c2 0214 	rsb	r2, r2, #20
 800442e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004432:	fa4a fa02 	asr.w	sl, sl, r2
 8004436:	2e00      	cmp	r6, #0
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	bfb8      	it	lt
 8004442:	f1ca 0a00 	rsblt	sl, sl, #0
 8004446:	f7fb fe9f 	bl	8000188 <__aeabi_dsub>
 800444a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800444e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	f7fb fe99 	bl	800018c <__adddf3>
 800445a:	a379      	add	r3, pc, #484	; (adr r3, 8004640 <__ieee754_pow+0x9b8>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	2000      	movs	r0, #0
 8004462:	460d      	mov	r5, r1
 8004464:	4604      	mov	r4, r0
 8004466:	f7fc f847 	bl	80004f8 <__aeabi_dmul>
 800446a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fb fe87 	bl	8000188 <__aeabi_dsub>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	f7fb fe81 	bl	8000188 <__aeabi_dsub>
 8004486:	a370      	add	r3, pc, #448	; (adr r3, 8004648 <__ieee754_pow+0x9c0>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fc f834 	bl	80004f8 <__aeabi_dmul>
 8004490:	a36f      	add	r3, pc, #444	; (adr r3, 8004650 <__ieee754_pow+0x9c8>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	4680      	mov	r8, r0
 8004498:	4689      	mov	r9, r1
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f7fc f82b 	bl	80004f8 <__aeabi_dmul>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4640      	mov	r0, r8
 80044a8:	4649      	mov	r1, r9
 80044aa:	f7fb fe6f 	bl	800018c <__adddf3>
 80044ae:	4604      	mov	r4, r0
 80044b0:	460d      	mov	r5, r1
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fb fe67 	bl	800018c <__adddf3>
 80044be:	4632      	mov	r2, r6
 80044c0:	463b      	mov	r3, r7
 80044c2:	4680      	mov	r8, r0
 80044c4:	4689      	mov	r9, r1
 80044c6:	f7fb fe5f 	bl	8000188 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fb fe59 	bl	8000188 <__aeabi_dsub>
 80044d6:	4642      	mov	r2, r8
 80044d8:	4606      	mov	r6, r0
 80044da:	460f      	mov	r7, r1
 80044dc:	464b      	mov	r3, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fc f809 	bl	80004f8 <__aeabi_dmul>
 80044e6:	a35c      	add	r3, pc, #368	; (adr r3, 8004658 <__ieee754_pow+0x9d0>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	4604      	mov	r4, r0
 80044ee:	460d      	mov	r5, r1
 80044f0:	f7fc f802 	bl	80004f8 <__aeabi_dmul>
 80044f4:	a35a      	add	r3, pc, #360	; (adr r3, 8004660 <__ieee754_pow+0x9d8>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb fe45 	bl	8000188 <__aeabi_dsub>
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f7fb fff9 	bl	80004f8 <__aeabi_dmul>
 8004506:	a358      	add	r3, pc, #352	; (adr r3, 8004668 <__ieee754_pow+0x9e0>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fb fe3e 	bl	800018c <__adddf3>
 8004510:	4622      	mov	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f7fb fff0 	bl	80004f8 <__aeabi_dmul>
 8004518:	a355      	add	r3, pc, #340	; (adr r3, 8004670 <__ieee754_pow+0x9e8>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fb fe33 	bl	8000188 <__aeabi_dsub>
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	f7fb ffe7 	bl	80004f8 <__aeabi_dmul>
 800452a:	a353      	add	r3, pc, #332	; (adr r3, 8004678 <__ieee754_pow+0x9f0>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb fe2c 	bl	800018c <__adddf3>
 8004534:	4622      	mov	r2, r4
 8004536:	462b      	mov	r3, r5
 8004538:	f7fb ffde 	bl	80004f8 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fb fe20 	bl	8000188 <__aeabi_dsub>
 8004548:	4604      	mov	r4, r0
 800454a:	460d      	mov	r5, r1
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	f7fb ffd0 	bl	80004f8 <__aeabi_dmul>
 8004558:	2200      	movs	r2, #0
 800455a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800455e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004562:	4620      	mov	r0, r4
 8004564:	4629      	mov	r1, r5
 8004566:	f7fb fe0f 	bl	8000188 <__aeabi_dsub>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004572:	f7fc f8eb 	bl	800074c <__aeabi_ddiv>
 8004576:	4632      	mov	r2, r6
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	463b      	mov	r3, r7
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f7fb ffb9 	bl	80004f8 <__aeabi_dmul>
 8004586:	4632      	mov	r2, r6
 8004588:	463b      	mov	r3, r7
 800458a:	f7fb fdff 	bl	800018c <__adddf3>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f7fb fdf7 	bl	8000188 <__aeabi_dsub>
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	f7fb fdf3 	bl	8000188 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	2000      	movs	r0, #0
 80045a8:	4939      	ldr	r1, [pc, #228]	; (8004690 <__ieee754_pow+0xa08>)
 80045aa:	f7fb fded 	bl	8000188 <__aeabi_dsub>
 80045ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80045b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80045b6:	da2b      	bge.n	8004610 <__ieee754_pow+0x988>
 80045b8:	4652      	mov	r2, sl
 80045ba:	f000 f9b9 	bl	8004930 <scalbn>
 80045be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045c2:	f7ff bbf6 	b.w	8003db2 <__ieee754_pow+0x12a>
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <__ieee754_pow+0xa0c>)
 80045c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80045cc:	429f      	cmp	r7, r3
 80045ce:	f77f af13 	ble.w	80043f8 <__ieee754_pow+0x770>
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <__ieee754_pow+0xa10>)
 80045d4:	440b      	add	r3, r1
 80045d6:	4303      	orrs	r3, r0
 80045d8:	d00b      	beq.n	80045f2 <__ieee754_pow+0x96a>
 80045da:	a329      	add	r3, pc, #164	; (adr r3, 8004680 <__ieee754_pow+0x9f8>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e4:	f7fb ff88 	bl	80004f8 <__aeabi_dmul>
 80045e8:	a325      	add	r3, pc, #148	; (adr r3, 8004680 <__ieee754_pow+0x9f8>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7ff bbe0 	b.w	8003db2 <__ieee754_pow+0x12a>
 80045f2:	4622      	mov	r2, r4
 80045f4:	462b      	mov	r3, r5
 80045f6:	f7fb fdc7 	bl	8000188 <__aeabi_dsub>
 80045fa:	4642      	mov	r2, r8
 80045fc:	464b      	mov	r3, r9
 80045fe:	f7fc fa01 	bl	8000a04 <__aeabi_dcmpge>
 8004602:	2800      	cmp	r0, #0
 8004604:	f43f aef8 	beq.w	80043f8 <__ieee754_pow+0x770>
 8004608:	e7e7      	b.n	80045da <__ieee754_pow+0x952>
 800460a:	f04f 0a00 	mov.w	sl, #0
 800460e:	e71e      	b.n	800444e <__ieee754_pow+0x7c6>
 8004610:	4621      	mov	r1, r4
 8004612:	e7d4      	b.n	80045be <__ieee754_pow+0x936>
 8004614:	f04f 0b00 	mov.w	fp, #0
 8004618:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004690 <__ieee754_pow+0xa08>
 800461c:	f7ff bb95 	b.w	8003d4a <__ieee754_pow+0xc2>
 8004620:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004624:	f7ff bb91 	b.w	8003d4a <__ieee754_pow+0xc2>
 8004628:	4638      	mov	r0, r7
 800462a:	4641      	mov	r1, r8
 800462c:	f7ff bbc3 	b.w	8003db6 <__ieee754_pow+0x12e>
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	f7ff bb9f 	b.w	8003d74 <__ieee754_pow+0xec>
 8004636:	bf00      	nop
 8004638:	652b82fe 	.word	0x652b82fe
 800463c:	3c971547 	.word	0x3c971547
 8004640:	00000000 	.word	0x00000000
 8004644:	3fe62e43 	.word	0x3fe62e43
 8004648:	fefa39ef 	.word	0xfefa39ef
 800464c:	3fe62e42 	.word	0x3fe62e42
 8004650:	0ca86c39 	.word	0x0ca86c39
 8004654:	be205c61 	.word	0xbe205c61
 8004658:	72bea4d0 	.word	0x72bea4d0
 800465c:	3e663769 	.word	0x3e663769
 8004660:	c5d26bf1 	.word	0xc5d26bf1
 8004664:	3ebbbd41 	.word	0x3ebbbd41
 8004668:	af25de2c 	.word	0xaf25de2c
 800466c:	3f11566a 	.word	0x3f11566a
 8004670:	16bebd93 	.word	0x16bebd93
 8004674:	3f66c16c 	.word	0x3f66c16c
 8004678:	5555553e 	.word	0x5555553e
 800467c:	3fc55555 	.word	0x3fc55555
 8004680:	c2f8f359 	.word	0xc2f8f359
 8004684:	01a56e1f 	.word	0x01a56e1f
 8004688:	3fe00000 	.word	0x3fe00000
 800468c:	000fffff 	.word	0x000fffff
 8004690:	3ff00000 	.word	0x3ff00000
 8004694:	4090cbff 	.word	0x4090cbff
 8004698:	3f6f3400 	.word	0x3f6f3400

0800469c <__ieee754_sqrt>:
 800469c:	4b54      	ldr	r3, [pc, #336]	; (80047f0 <__ieee754_sqrt+0x154>)
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	438b      	bics	r3, r1
 80046a4:	4606      	mov	r6, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	460a      	mov	r2, r1
 80046aa:	460c      	mov	r4, r1
 80046ac:	d10f      	bne.n	80046ce <__ieee754_sqrt+0x32>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	f7fb ff21 	bl	80004f8 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4630      	mov	r0, r6
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fb fd65 	bl	800018c <__adddf3>
 80046c2:	4606      	mov	r6, r0
 80046c4:	460d      	mov	r5, r1
 80046c6:	4630      	mov	r0, r6
 80046c8:	4629      	mov	r1, r5
 80046ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ce:	2900      	cmp	r1, #0
 80046d0:	4607      	mov	r7, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	dc0e      	bgt.n	80046f4 <__ieee754_sqrt+0x58>
 80046d6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80046da:	ea5c 0707 	orrs.w	r7, ip, r7
 80046de:	d0f2      	beq.n	80046c6 <__ieee754_sqrt+0x2a>
 80046e0:	b141      	cbz	r1, 80046f4 <__ieee754_sqrt+0x58>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	f7fb fd4f 	bl	8000188 <__aeabi_dsub>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	f7fc f82d 	bl	800074c <__aeabi_ddiv>
 80046f2:	e7e6      	b.n	80046c2 <__ieee754_sqrt+0x26>
 80046f4:	1512      	asrs	r2, r2, #20
 80046f6:	d074      	beq.n	80047e2 <__ieee754_sqrt+0x146>
 80046f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80046fc:	07d5      	lsls	r5, r2, #31
 80046fe:	f04f 0500 	mov.w	r5, #0
 8004702:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004706:	bf48      	it	mi
 8004708:	0fd9      	lsrmi	r1, r3, #31
 800470a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800470e:	bf44      	itt	mi
 8004710:	005b      	lslmi	r3, r3, #1
 8004712:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004716:	1051      	asrs	r1, r2, #1
 8004718:	0fda      	lsrs	r2, r3, #31
 800471a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800471e:	4628      	mov	r0, r5
 8004720:	2216      	movs	r2, #22
 8004722:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	1987      	adds	r7, r0, r6
 800472a:	42a7      	cmp	r7, r4
 800472c:	bfde      	ittt	le
 800472e:	19b8      	addle	r0, r7, r6
 8004730:	1be4      	suble	r4, r4, r7
 8004732:	19ad      	addle	r5, r5, r6
 8004734:	0fdf      	lsrs	r7, r3, #31
 8004736:	3a01      	subs	r2, #1
 8004738:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800473c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004740:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004744:	d1f0      	bne.n	8004728 <__ieee754_sqrt+0x8c>
 8004746:	f04f 0c20 	mov.w	ip, #32
 800474a:	4696      	mov	lr, r2
 800474c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004750:	4284      	cmp	r4, r0
 8004752:	eb06 070e 	add.w	r7, r6, lr
 8004756:	dc02      	bgt.n	800475e <__ieee754_sqrt+0xc2>
 8004758:	d112      	bne.n	8004780 <__ieee754_sqrt+0xe4>
 800475a:	429f      	cmp	r7, r3
 800475c:	d810      	bhi.n	8004780 <__ieee754_sqrt+0xe4>
 800475e:	2f00      	cmp	r7, #0
 8004760:	eb07 0e06 	add.w	lr, r7, r6
 8004764:	da42      	bge.n	80047ec <__ieee754_sqrt+0x150>
 8004766:	f1be 0f00 	cmp.w	lr, #0
 800476a:	db3f      	blt.n	80047ec <__ieee754_sqrt+0x150>
 800476c:	f100 0801 	add.w	r8, r0, #1
 8004770:	1a24      	subs	r4, r4, r0
 8004772:	4640      	mov	r0, r8
 8004774:	429f      	cmp	r7, r3
 8004776:	bf88      	it	hi
 8004778:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800477c:	1bdb      	subs	r3, r3, r7
 800477e:	4432      	add	r2, r6
 8004780:	0064      	lsls	r4, r4, #1
 8004782:	f1bc 0c01 	subs.w	ip, ip, #1
 8004786:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800478a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800478e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004792:	d1dd      	bne.n	8004750 <__ieee754_sqrt+0xb4>
 8004794:	4323      	orrs	r3, r4
 8004796:	d006      	beq.n	80047a6 <__ieee754_sqrt+0x10a>
 8004798:	1c54      	adds	r4, r2, #1
 800479a:	bf0b      	itete	eq
 800479c:	4662      	moveq	r2, ip
 800479e:	3201      	addne	r2, #1
 80047a0:	3501      	addeq	r5, #1
 80047a2:	f022 0201 	bicne.w	r2, r2, #1
 80047a6:	106b      	asrs	r3, r5, #1
 80047a8:	0852      	lsrs	r2, r2, #1
 80047aa:	07e8      	lsls	r0, r5, #31
 80047ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80047b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80047b4:	bf48      	it	mi
 80047b6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80047ba:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80047be:	4616      	mov	r6, r2
 80047c0:	e781      	b.n	80046c6 <__ieee754_sqrt+0x2a>
 80047c2:	0adc      	lsrs	r4, r3, #11
 80047c4:	3915      	subs	r1, #21
 80047c6:	055b      	lsls	r3, r3, #21
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d0fa      	beq.n	80047c2 <__ieee754_sqrt+0x126>
 80047cc:	02e6      	lsls	r6, r4, #11
 80047ce:	d50a      	bpl.n	80047e6 <__ieee754_sqrt+0x14a>
 80047d0:	f1c2 0020 	rsb	r0, r2, #32
 80047d4:	fa23 f000 	lsr.w	r0, r3, r0
 80047d8:	1e55      	subs	r5, r2, #1
 80047da:	4093      	lsls	r3, r2
 80047dc:	4304      	orrs	r4, r0
 80047de:	1b4a      	subs	r2, r1, r5
 80047e0:	e78a      	b.n	80046f8 <__ieee754_sqrt+0x5c>
 80047e2:	4611      	mov	r1, r2
 80047e4:	e7f0      	b.n	80047c8 <__ieee754_sqrt+0x12c>
 80047e6:	0064      	lsls	r4, r4, #1
 80047e8:	3201      	adds	r2, #1
 80047ea:	e7ef      	b.n	80047cc <__ieee754_sqrt+0x130>
 80047ec:	4680      	mov	r8, r0
 80047ee:	e7bf      	b.n	8004770 <__ieee754_sqrt+0xd4>
 80047f0:	7ff00000 	.word	0x7ff00000

080047f4 <fabs>:
 80047f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047f8:	4619      	mov	r1, r3
 80047fa:	4770      	bx	lr

080047fc <finite>:
 80047fc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004800:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004804:	0fc0      	lsrs	r0, r0, #31
 8004806:	4770      	bx	lr

08004808 <matherr>:
 8004808:	2000      	movs	r0, #0
 800480a:	4770      	bx	lr

0800480c <nan>:
 800480c:	2000      	movs	r0, #0
 800480e:	4901      	ldr	r1, [pc, #4]	; (8004814 <nan+0x8>)
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	7ff80000 	.word	0x7ff80000

08004818 <rint>:
 8004818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800481a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800481e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8004822:	f1bc 0f13 	cmp.w	ip, #19
 8004826:	4604      	mov	r4, r0
 8004828:	460d      	mov	r5, r1
 800482a:	460b      	mov	r3, r1
 800482c:	4606      	mov	r6, r0
 800482e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8004832:	dc5a      	bgt.n	80048ea <rint+0xd2>
 8004834:	f1bc 0f00 	cmp.w	ip, #0
 8004838:	da2b      	bge.n	8004892 <rint+0x7a>
 800483a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800483e:	4302      	orrs	r2, r0
 8004840:	d023      	beq.n	800488a <rint+0x72>
 8004842:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004846:	4302      	orrs	r2, r0
 8004848:	4256      	negs	r6, r2
 800484a:	4316      	orrs	r6, r2
 800484c:	0c4b      	lsrs	r3, r1, #17
 800484e:	0b36      	lsrs	r6, r6, #12
 8004850:	4934      	ldr	r1, [pc, #208]	; (8004924 <rint+0x10c>)
 8004852:	045b      	lsls	r3, r3, #17
 8004854:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8004858:	ea46 0503 	orr.w	r5, r6, r3
 800485c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004860:	4602      	mov	r2, r0
 8004862:	462b      	mov	r3, r5
 8004864:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	f7fb fc8e 	bl	800018c <__adddf3>
 8004870:	e9cd 0100 	strd	r0, r1, [sp]
 8004874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004878:	462b      	mov	r3, r5
 800487a:	4622      	mov	r2, r4
 800487c:	f7fb fc84 	bl	8000188 <__aeabi_dsub>
 8004880:	4604      	mov	r4, r0
 8004882:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004886:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	b003      	add	sp, #12
 8004890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <rint+0x110>)
 8004894:	fa42 f20c 	asr.w	r2, r2, ip
 8004898:	4011      	ands	r1, r2
 800489a:	4301      	orrs	r1, r0
 800489c:	d0f5      	beq.n	800488a <rint+0x72>
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	ea05 0102 	and.w	r1, r5, r2
 80048a4:	ea50 0601 	orrs.w	r6, r0, r1
 80048a8:	d00c      	beq.n	80048c4 <rint+0xac>
 80048aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048ae:	f1bc 0f13 	cmp.w	ip, #19
 80048b2:	bf0c      	ite	eq
 80048b4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80048b8:	2600      	movne	r6, #0
 80048ba:	ea25 0202 	bic.w	r2, r5, r2
 80048be:	fa43 f30c 	asr.w	r3, r3, ip
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4917      	ldr	r1, [pc, #92]	; (8004924 <rint+0x10c>)
 80048c6:	4632      	mov	r2, r6
 80048c8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80048cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d0:	4620      	mov	r0, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	f7fb fc5a 	bl	800018c <__adddf3>
 80048d8:	e9cd 0100 	strd	r0, r1, [sp]
 80048dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048e0:	4622      	mov	r2, r4
 80048e2:	462b      	mov	r3, r5
 80048e4:	f7fb fc50 	bl	8000188 <__aeabi_dsub>
 80048e8:	e008      	b.n	80048fc <rint+0xe4>
 80048ea:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80048ee:	dd08      	ble.n	8004902 <rint+0xea>
 80048f0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80048f4:	d1c9      	bne.n	800488a <rint+0x72>
 80048f6:	4602      	mov	r2, r0
 80048f8:	f7fb fc48 	bl	800018c <__adddf3>
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	e7c3      	b.n	800488a <rint+0x72>
 8004902:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	40ca      	lsrs	r2, r1
 800490c:	4210      	tst	r0, r2
 800490e:	d0bc      	beq.n	800488a <rint+0x72>
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	4210      	tst	r0, r2
 8004914:	bf1f      	itttt	ne
 8004916:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800491a:	ea20 0202 	bicne.w	r2, r0, r2
 800491e:	410e      	asrne	r6, r1
 8004920:	4316      	orrne	r6, r2
 8004922:	e7cf      	b.n	80048c4 <rint+0xac>
 8004924:	08004c68 	.word	0x08004c68
 8004928:	000fffff 	.word	0x000fffff
 800492c:	00000000 	.word	0x00000000

08004930 <scalbn>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	4616      	mov	r6, r2
 8004934:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	460b      	mov	r3, r1
 800493e:	b982      	cbnz	r2, 8004962 <scalbn+0x32>
 8004940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004944:	4303      	orrs	r3, r0
 8004946:	d034      	beq.n	80049b2 <scalbn+0x82>
 8004948:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <scalbn+0xd0>)
 800494a:	2200      	movs	r2, #0
 800494c:	f7fb fdd4 	bl	80004f8 <__aeabi_dmul>
 8004950:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <scalbn+0xd4>)
 8004952:	4604      	mov	r4, r0
 8004954:	429e      	cmp	r6, r3
 8004956:	460d      	mov	r5, r1
 8004958:	da0d      	bge.n	8004976 <scalbn+0x46>
 800495a:	a325      	add	r3, pc, #148	; (adr r3, 80049f0 <scalbn+0xc0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	e01c      	b.n	800499c <scalbn+0x6c>
 8004962:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004966:	42ba      	cmp	r2, r7
 8004968:	d109      	bne.n	800497e <scalbn+0x4e>
 800496a:	4602      	mov	r2, r0
 800496c:	f7fb fc0e 	bl	800018c <__adddf3>
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	e01d      	b.n	80049b2 <scalbn+0x82>
 8004976:	460b      	mov	r3, r1
 8004978:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800497c:	3a36      	subs	r2, #54	; 0x36
 800497e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004982:	4432      	add	r2, r6
 8004984:	428a      	cmp	r2, r1
 8004986:	dd0c      	ble.n	80049a2 <scalbn+0x72>
 8004988:	4622      	mov	r2, r4
 800498a:	462b      	mov	r3, r5
 800498c:	a11a      	add	r1, pc, #104	; (adr r1, 80049f8 <scalbn+0xc8>)
 800498e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004992:	f000 f83b 	bl	8004a0c <copysign>
 8004996:	a318      	add	r3, pc, #96	; (adr r3, 80049f8 <scalbn+0xc8>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fdac 	bl	80004f8 <__aeabi_dmul>
 80049a0:	e7e6      	b.n	8004970 <scalbn+0x40>
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	dd08      	ble.n	80049b8 <scalbn+0x88>
 80049a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80049bc:	da0b      	bge.n	80049d6 <scalbn+0xa6>
 80049be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049c2:	429e      	cmp	r6, r3
 80049c4:	4622      	mov	r2, r4
 80049c6:	462b      	mov	r3, r5
 80049c8:	dce0      	bgt.n	800498c <scalbn+0x5c>
 80049ca:	a109      	add	r1, pc, #36	; (adr r1, 80049f0 <scalbn+0xc0>)
 80049cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d0:	f000 f81c 	bl	8004a0c <copysign>
 80049d4:	e7c1      	b.n	800495a <scalbn+0x2a>
 80049d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049da:	3236      	adds	r2, #54	; 0x36
 80049dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	2200      	movs	r2, #0
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <scalbn+0xd8>)
 80049ec:	e7d6      	b.n	800499c <scalbn+0x6c>
 80049ee:	bf00      	nop
 80049f0:	c2f8f359 	.word	0xc2f8f359
 80049f4:	01a56e1f 	.word	0x01a56e1f
 80049f8:	8800759c 	.word	0x8800759c
 80049fc:	7e37e43c 	.word	0x7e37e43c
 8004a00:	43500000 	.word	0x43500000
 8004a04:	ffff3cb0 	.word	0xffff3cb0
 8004a08:	3c900000 	.word	0x3c900000

08004a0c <copysign>:
 8004a0c:	b530      	push	{r4, r5, lr}
 8004a0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a16:	ea42 0503 	orr.w	r5, r2, r3
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	bd30      	pop	{r4, r5, pc}
	...

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
